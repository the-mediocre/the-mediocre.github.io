<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>axios</title>
    <url>/2022/04/09/axios/</url>
    <content><![CDATA[<h5 id="配套使用json-server-官网"><a href="#配套使用json-server-官网" class="headerlink" title="配套使用json-server 官网"></a>配套使用json-server <a href="https://www.npmjs.com/package/json-server">官网</a></h5><ol>
<li><p>安装npm install -g json-server</p>
</li>
<li><p>json-server –watch db.json</p>
</li>
<li><p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line">      </span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br></pre></td></tr></table></figure>


</li>
<li><p>创建实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance=axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">            <span class="attr">baseURL</span>:<span class="string">&#x27;https://autumnfish.cn/api/&#x27;</span>,<span class="comment">//大写</span></span><br><span class="line">            <span class="attr">tiemout</span>:<span class="number">2000</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>请求拦截器响应拦截器,多个的话,请求后进先执行,响应相反,config配置对象</p>
</li>
</ol>
<h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p>yarn init</p>
<p>yarn add webpack webpack-cli -D</p>
<p>新建文件夹src—-index.js      build</p>
<p>vue中的eslint检查</p>
<p>lintOnSave: false</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>webpack</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios_TypeScript重构</title>
    <url>/2022/05/05/Axios-TypeScript%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ol>
<li>浏览器端ajax通讯</li>
<li>支持promise API</li>
<li>支持请求和响应拦截器</li>
<li>支持请求数据和响应数据的转换</li>
<li>支持请求的取消</li>
<li>JSON数据的自动转换</li>
<li>客服端防止xss和csrf</li>
</ol>
<h4 id="搭建初始化环境"><a href="#搭建初始化环境" class="headerlink" title="搭建初始化环境"></a>搭建初始化环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git clone https://github.com/alexjoverm/typescript-library-starter.git</span><br><span class="line">//本地关联远程仓库</span><br><span class="line">git remote -v//查看关联的仓库</span><br><span class="line">git remote add orgin git@github.com:the-mediocre/Axios_TS.git//添加关联</span><br><span class="line">git remote rm orgin//删除关联</span><br><span class="line">git push origin master//推送到远程仓库</span><br></pre></td></tr></table></figure>

<p>遇到问题:vs code : Not using the local TSLint version found for XXX</p>
<ul>
<li>ctrl+shift+p</li>
<li>输入tslint选择 </li>
<li>选项 Manage workspace library execution 回车即可</li>
</ul>
]]></content>
      <tags>
        <tag>axios</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>_call_bind_apply</title>
    <url>/2022/04/04/call-bind-apply/</url>
    <content><![CDATA[<p>需要满足三点</p>
<blockquote>
<p>&#x2F;&#x2F;改变this指向<br>&#x2F;&#x2F; 参数变化<br>&#x2F;&#x2F;返回结果</p>
</blockquote>
<h5 id="call手写-找出调用者-将方法变为自身-x2F-x2F-x2F-x2F"><a href="#call手写-找出调用者-将方法变为自身-x2F-x2F-x2F-x2F" class="headerlink" title="call手写(找出调用者,将方法变为自身)&#x2F;&#x2F;&#x2F;&#x2F;"></a>call手写(找出调用者,将方法变为自身)&#x2F;&#x2F;&#x2F;&#x2F;</h5><p>  根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined，call方法将把全局对象（浏览器上是window对象）作为this的值。所以，不管传入null 还是 undefined，其this都是全局对象window。所以，在浏览器上答案是输出 window 对象</p>
<p>要注意的是，在严格模式中，null 就是 null，undefined 就是 undefined：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">let</span> args =[...<span class="variable language_">arguments</span>]</span><br><span class="line">           <span class="keyword">const</span> thisVal = args.<span class="title function_">shift</span>()</span><br><span class="line">           thisVal.<span class="property">fn</span> = <span class="variable language_">this</span><span class="comment">//将环境换成调用者内部改变函数this指向</span></span><br><span class="line">           <span class="keyword">let</span> res = thisVal.<span class="title function_">fn</span>(...args)</span><br><span class="line">           <span class="keyword">delete</span> thisVal.<span class="property">fn</span></span><br><span class="line">           <span class="keyword">return</span> res</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h6 id="apply-传两个参数给解开"><a href="#apply-传两个参数给解开" class="headerlink" title="apply(传两个参数给解开)"></a>apply(传两个参数给解开)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>]</span><br><span class="line">           <span class="keyword">const</span> thisVal = args.<span class="title function_">shift</span>()</span><br><span class="line">           thisVal.<span class="property">fn</span> = <span class="variable language_">this</span><span class="comment">//将环境换成调用者内部改变函数this指向</span></span><br><span class="line">           <span class="keyword">let</span> res = thisVal.<span class="title function_">fn</span>(...args[<span class="number">0</span>])</span><br><span class="line">           <span class="keyword">delete</span> thisVal.<span class="property">fn</span></span><br><span class="line">           <span class="keyword">return</span> res</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><blockquote>
<p>bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">14</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sing</span>(<span class="params">a</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> say = sing.<span class="title function_">bind</span>(people, <span class="number">1</span>)</span><br><span class="line">        <span class="title function_">say</span>()</span><br></pre></td></tr></table></figure>

<h6 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="comment">// console.log(this);//this是使用者函数需要保存</span></span><br><span class="line">    	<span class="keyword">const</span> self=<span class="variable language_">this</span></span><br><span class="line">    	<span class="comment">// console.log(arguments);//类数组转化为数组</span></span><br><span class="line">    	<span class="comment">//const args=Array.prototype.slice.call(arguments)//将数组方法用call借用,得到数组</span></span><br><span class="line">        <span class="keyword">const</span> args=[...<span class="variable language_">arguments</span>]</span><br><span class="line">        <span class="comment">// console.log(args);</span></span><br><span class="line">        <span class="keyword">const</span> thisVal=args.<span class="title function_">shift</span>()<span class="comment">//将需要改变的this和参数分开</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> self.<span class="title function_">apply</span>(thisVal,args)<span class="comment">//满足调用时有返回结果/是原函数的返回值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>call</tag>
        <tag>bind</tag>
      </tags>
  </entry>
  <entry>
    <title>异步</title>
    <url>/2022/04/05/eventloop/</url>
    <content><![CDATA[<h5 id="调用栈-消息队列-微任务队列-宏任务-微任务"><a href="#调用栈-消息队列-微任务队列-宏任务-微任务" class="headerlink" title="调用栈  消息队列  微任务队列  宏任务  微任务"></a>调用栈  消息队列  微任务队列  宏任务  微任务</h5><blockquote>
<p>宏任务—-&gt;微任务—-&gt;渲染(alert阻塞)—-&gt;宏任务</p>
</blockquote>
<ol>
<li>单线程:防止多线程同时操作dom,排队</li>
<li>异步:防止代码堵塞,eventloop</li>
</ol>
<h5 id="promise手写要素-特点"><a href="#promise手写要素-特点" class="headerlink" title="promise手写要素(特点)"></a>promise手写要素(特点)</h5><ol>
<li>resolve&#x3D;&gt;fulfilled, reject&#x3D;&gt;rejected</li>
<li>只能一次改变, throw&#x3D;&#x3D;&#x3D;reject</li>
<li>resolve,reject函数绑定this</li>
<li>then方法传入参数是否是函数</li>
<li>定时器导致的pending状态callback属性保存</li>
<li>then方法返回promise,状态由 then方法返回结果决定,</li>
<li>用定时器模拟微任务状态</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>)&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.<span class="title function_">onResolved</span>(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(onResolved);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(onRejected);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 all 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="comment">//返回结果为promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(count === promises.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="comment">//修改状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 race 方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<ol>
<li>catch方法调用then方法只传入onrejected方法</li>
<li>resolve自身属性返回promise状态由传入状态决定</li>
<li>reject返回失败promise</li>
<li>all方法数组,count++时候等于length</li>
<li>race直接then方法,无参数是成功的promise</li>
</ol>
<h6 id="async-await"><a href="#async-await" class="headerlink" title="async,,await"></a>async,,await</h6><ol>
<li>await后面如过不接promise可能会不按照顺序,结果按照执行快慢</li>
<li>await 后面接promise且没有返回值,则后面的代码不会执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num * <span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">22</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>async函数返回结果看函数return结果决定</li>
<li>await可以用try catch包裹</li>
</ol>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span><span class="comment">//yield+函数执行函数,并且函数返回值做value||接promise,value为pending状态的promiseA,调用then方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.dir(gen);//generator//产生器//suspended//暂停</span></span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">gen</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>());<span class="comment">//走完了next方法返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: 2, done: true &#125;是否有return</span></span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<p>next传值被yield接收 ,第二个开始传</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">gen</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="number">111</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="number">222</span>));</span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// 111</span></span><br><span class="line"><span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="comment">// 222</span></span><br><span class="line"><span class="comment">// &#123; value: 3, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="防抖-停止动作后（时间点）-自定义时间（延迟）-x3D-gt-触发事件-多变一-形成闭包"><a href="#防抖-停止动作后（时间点）-自定义时间（延迟）-x3D-gt-触发事件-多变一-形成闭包" class="headerlink" title="防抖:停止动作后（时间点）+ 自定义时间（延迟）&#x3D;&gt; 触发事件  || 多变一   (形成闭包)"></a>防抖:停止动作后（时间点）+ 自定义时间（延迟）&#x3D;&gt; 触发事件  || 多变一   (形成闭包)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                &#125;</span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    timer=<span class="literal">null</span></span><br><span class="line">                &#125;, delay);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>节流:多次操作变成少量操作(timer为true  异步队列)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> timer = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                        timer = <span class="literal">true</span></span><br><span class="line">                    &#125;, delay);</span><br><span class="line">                &#125;</span><br><span class="line">                timer = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h6 id="定时器误差"><a href="#定时器误差" class="headerlink" title="定时器误差"></a>定时器误差</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i++&gt;<span class="number">1000000</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> delay = <span class="number">1000</span></span><br><span class="line"><span class="keyword">let</span> offset=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> nextTime=delay-offset</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setTimeout</span>(fn, nextTime)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - (now + count * delay));</span><br><span class="line">    offset=<span class="title class_">Date</span>.<span class="title function_">now</span>() - (now + count * delay)</span><br><span class="line">    nextTime=delay-offset</span><br><span class="line">    <span class="keyword">if</span> (nextTime &lt; <span class="number">0</span>) &#123; nextTime = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn, nextTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>settimeout: 误差HTML5规范规定最小延迟时间不能小于4ms，即x如果小于4，会被当做4来处理。 不过不同浏览器的实现不一样，比如，Chrome可以设置1ms，IE11&#x2F;Edge是4ms</p>
<h4 id="promise并发"><a href="#promise并发" class="headerlink" title="promise并发"></a>promise并发</h4><h6 id="啥也不用"><a href="#啥也不用" class="headerlink" title="啥也不用"></a>啥也不用</h6><blockquote>
<p>while循环负责开始时填满并发池,入口触发addTask函数;;  request负责处理请求并且返回是否处理成功;;;  addTask函数触发request处理请求,并且往pool里面添加task任务状态,通过task成功状态,先将pool中的当前请求删除,将任务队列弹出,对弹出的判断是否不断往里面添加请求,</p>
<p>while—&gt;addTask—-&gt;request—&gt;addTask—-&gt;task.then—-&gt;删掉当前task—-&gt;判断是否接着加task</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="string">`任务<span class="subst">$&#123;url&#125;</span>完成`</span>)</span><br><span class="line">                &#125;, <span class="number">1000</span>);</span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//业务逻辑</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加任务</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">addTask</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> task = <span class="title function_">request</span>(url)</span><br><span class="line">            pool.<span class="title function_">push</span>(task)<span class="comment">//填入</span></span><br><span class="line">            task.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                pool.<span class="title function_">splice</span>(pool.<span class="title function_">indexOf</span>(task), <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// console.log(`$&#123;url&#125;结束;;当前并发数$&#123;pool.length&#125;`)</span></span><br><span class="line">                url = urls.<span class="title function_">shift</span>()</span><br><span class="line">                <span class="keyword">if</span> (url !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="title function_">addTask</span>(url)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> urls = [<span class="string">&#x27;00000&#x27;</span>, <span class="string">&#x27;11111&#x27;</span>, <span class="string">&#x27;22222&#x27;</span>, <span class="string">&#x27;33333&#x27;</span>, <span class="string">&#x27;44444&#x27;</span>, <span class="string">&#x27;55555&#x27;</span>, <span class="string">&#x27;66666&#x27;</span>, <span class="string">&#x27;77777&#x27;</span>]</span><br><span class="line">        <span class="keyword">let</span> pool = []<span class="comment">//并发池</span></span><br><span class="line">        <span class="keyword">let</span> max = <span class="number">3</span><span class="comment">//最大并发数</span></span><br><span class="line">        <span class="comment">//循环塞满并发池</span></span><br><span class="line">        <span class="keyword">while</span> (pool.<span class="property">length</span> &lt; max) &#123;</span><br><span class="line">            <span class="keyword">let</span> url = urls.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="title function_">addTask</span>(url)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>event loop</tag>
        <tag>promise</tag>
        <tag>async</tag>
        <tag>await</tag>
        <tag>防抖节流</tag>
      </tags>
  </entry>
  <entry>
    <title>css</title>
    <url>/2022/04/12/css/</url>
    <content><![CDATA[<h5 id="盒模型-内容宽度是否含有border-padding-gt-gt-gt-box-sizing-border-box"><a href="#盒模型-内容宽度是否含有border-padding-gt-gt-gt-box-sizing-border-box" class="headerlink" title="盒模型: 内容宽度是否含有border,padding&gt;&gt;&gt;box-sizing:border-box"></a>盒模型: 内容宽度是否含有border,padding&gt;&gt;&gt;box-sizing:border-box</h5><h6 id="权重-important-比内联样式高-gt-gt-gt-id-gt-class-gt-tag-10"><a href="#权重-important-比内联样式高-gt-gt-gt-id-gt-class-gt-tag-10" class="headerlink" title="权重: important(比内联样式高)&gt;&gt;&gt;id&gt;class&gt;tag   (10)"></a>权重: important(比内联样式高)&gt;&gt;&gt;id&gt;class&gt;tag   (10)</h6><h6 id="新增伪类-first-of-type"><a href="#新增伪类-first-of-type" class="headerlink" title="新增伪类:first-of-type,,,,,,,"></a>新增伪类:first-of-type,,,,,,,</h6><h6 id="居中元素"><a href="#居中元素" class="headerlink" title="居中元素"></a>居中元素</h6><h6 id="display-inline-x2F-none-x2F-block-x2F-table-x2F-inline-block"><a href="#display-inline-x2F-none-x2F-block-x2F-table-x2F-inline-block" class="headerlink" title="display:inline&#x2F;none&#x2F;block&#x2F;table&#x2F;inline-block"></a>display:inline&#x2F;none&#x2F;block&#x2F;table&#x2F;inline-block</h6><h6 id="position-static-默认-x2F-relative-x2F-absolute-x2F-fixed-脱离文档流"><a href="#position-static-默认-x2F-relative-x2F-absolute-x2F-fixed-脱离文档流" class="headerlink" title="position:static(默认)&#x2F;relative&#x2F;                           absolute&#x2F;fixed(脱离文档流)"></a>position:static(默认)&#x2F;relative&#x2F;                           absolute&#x2F;fixed(脱离文档流)</h6><h6 id="css3特性"><a href="#css3特性" class="headerlink" title="css3特性:"></a>css3特性:</h6><ol>
<li>透明度</li>
<li>word-wrap不可分割的单词换行</li>
<li>文字阴影:text-shadow</li>
<li>border-radius</li>
<li>box-shadow</li>
<li>媒体查询</li>
</ol>
<h6 id="用css画三角形"><a href="#用css画三角形" class="headerlink" title="用css画三角形:"></a>用css画三角形:</h6><ol>
<li><p>宽高为零</p>
</li>
<li><p>border设长度透明度(transparent),某一个设置颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">border-top</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">            <span class="attribute">border-left</span>: <span class="number">40px</span> solid black;</span><br><span class="line">            <span class="attribute">border-right</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h6 id="display-none-回流-重绘-不保留空间-与visbility-hedden-重绘-保留空间"><a href="#display-none-回流-重绘-不保留空间-与visbility-hedden-重绘-保留空间" class="headerlink" title="display:none(回流+重绘)不保留空间     与visbility:hedden(重绘)保留空间"></a>display:none(回流+重绘)不保留空间     与visbility:hedden(重绘)保留空间</h6><p>重绘:一部分改变不影响其他的</p>
<p>重排(回流): 其他的被影响</p>
<h6 id="BFC-块级格式上下文-BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局"><a href="#BFC-块级格式上下文-BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局" class="headerlink" title="BFC:块级格式上下文;(BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局)"></a>BFC:块级格式上下文;(BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局)</h6><ol>
<li>float脱离文档流高度塌陷</li>
<li>外边距重叠</li>
</ol>
<p>形成BFC条件:</p>
<ul>
<li>浮动元素</li>
<li>绝对定位元素absolute&#x2F;fixed</li>
<li>display:inline-blox</li>
<li>块级元素  overflow</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*添加类名*/</span></span><br><span class="line"><span class="selector-class">.bfc</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hedden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="清楚浮动-父元素高度无法被撑开-x2F-x2F-同级元素跟在后面-浮动后的元素是display-block"><a href="#清楚浮动-父元素高度无法被撑开-x2F-x2F-同级元素跟在后面-浮动后的元素是display-block" class="headerlink" title="清楚浮动:   父元素高度无法被撑开&#x2F;&#x2F;同级元素跟在后面      浮动后的元素是display: block"></a>清楚浮动:   父元素高度无法被撑开&#x2F;&#x2F;同级元素跟在后面      浮动后的元素是display: block</h6><ol>
<li><p>在最底下创建块级元素clear:both</p>
</li>
<li><p>父元素bfc</p>
</li>
<li><p>伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>圣杯布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.header</span>,</span><br><span class="line">        <span class="selector-class">.footer</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.main</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">140px</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*将所有的都左浮动;左边的position relative/右边的*/</span></span><br><span class="line">        <span class="selector-class">.middle</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: cadetblue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.left</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">background-color</span>: darkblue;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">margin-right</span>: -<span class="number">140px</span>;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">background-color</span>: chocolate;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.main</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">header</span>&quot;&gt;<span class="selector-tag">header</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">main</span>&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;middle&quot;&gt;middle&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">left</span>&quot;&gt;<span class="attribute">left</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">right</span>&quot;&gt;<span class="attribute">right</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">footer</span>&quot;&gt;<span class="selector-tag">footer</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>





<p>双飞翼</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* .wrap &#123;</span></span><br><span class="line"><span class="comment">            min-width: 600px;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#header</span>,</span><br><span class="line">        <span class="selector-id">#footer</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background</span>: grey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#left</span>,</span><br><span class="line">        <span class="selector-id">#right</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#middle</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: pink;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#content</span> &#123;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#left</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#right</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.middle-inner</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;wrap&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> id=&quot;<span class="selector-tag">header</span>&quot;&gt;<span class="selector-tag">header</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> id=&quot;<span class="attribute">content</span>&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> id=&quot;middle&quot;&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=&quot;middle-inner&quot;&gt;</span><br><span class="line">                    middle</span><br><span class="line">                &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> id=&quot;<span class="attribute">left</span>&quot;&gt;<span class="attribute">left</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> id=&quot;<span class="attribute">right</span>&quot;&gt;<span class="attribute">right</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> id=&quot;<span class="selector-tag">footer</span>&quot;&gt;<span class="selector-tag">footer</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<p>left、center、right三种都设置左浮动<br>设置center宽度为100%<br>设置负边距，left设置负边距为100%，right设置负边距为自身宽度<br>设置content的margin值为左右两个侧栏留出空间，margin值大小为left和right宽度</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flex-grow</td>
<td>一个数字，规定项目将相对于其他灵活的项目进行扩展的量。</td>
</tr>
<tr>
<td>flex-shrink</td>
<td>一个数字，规定项目将相对于其他灵活的项目进行收缩的量。</td>
</tr>
<tr>
<td>flex-basis</td>
<td>项目的长度。合法值：”auto”、”inherit” 或一个后跟 “%”、”px”、”em” 或任何其他长度单位的数字。</td>
</tr>
<tr>
<td>auto</td>
<td>与 1 1 auto 相同。</td>
</tr>
<tr>
<td>none</td>
<td>与 0 0 auto 相同。</td>
</tr>
</tbody></table>
<ul>
<li><p>对齐方向:	flex-direction: row|       row-reverse|          column|          column-reverse|                    initial|inherit</p>
</li>
<li><p>对齐方向和是否换行缩写:  flex-flow: <em>flex-direction</em> <em>flex-wrap</em>|initial|inherit;</p>
<ul>
<li>justify-content属性定义了项目在主轴上的对齐方式。<br>justify-content: flex-start | flex-end | center | space-between | space-around;</li>
<li>align-items属性定义项目在交叉轴上如何对齐。<br>align-items: flex-start | flex-end | center | baseline | stretch;</li>
<li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</li>
</ul>
</li>
<li><p>padding单位为%,是基于父元素的百分比填充</p>
</li>
</ul>
<h5 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.center</span>&#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">           <span class="attribute">position</span>: relative;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: pink;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="selector-class">.center</span> &#123;</span><br><span class="line">           <span class="attribute">position</span>: absolute;</span><br><span class="line">           <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">           <span class="attribute">margin</span>: auto;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">justify-content</span>: center;</span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.center</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>一行文字居中,多行文字左对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80vw</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>面试</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>js面试</title>
    <url>/2022/04/03/js%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h5 id="命名提升"><a href="#命名提升" class="headerlink" title="命名提升"></a>命名提升</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">//不报错</span></span><br><span class="line">fn2</span><br><span class="line"><span class="keyword">let</span> fn2=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; </span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<h5 id="闭包知识点"><a href="#闭包知识点" class="headerlink" title="闭包知识点"></a>闭包知识点</h5><blockquote>
<p>《你不知道的javaScript》对于闭包是这么定义的：函数创建和函数执行不在同一个作用域下就会形成闭包。<br>MDN对于闭包的定义为：闭包是指那些能够访问自由变量的函数。<br>《JS高级程序设计-第3版》对于闭包的定义: 闭包是指有权访问另外一个函数作用域中的变量的函数</p>
</blockquote>
<h6 id="作用域和词法作用域"><a href="#作用域和词法作用域" class="headerlink" title="作用域和词法作用域"></a>作用域和词法作用域</h6><p>词法作用域就是写出的程序所在的环境</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   		<span class="variable language_">console</span>.<span class="title function_">log</span>(++a)</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f=<span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//2定义在内部</span></span><br></pre></td></tr></table></figure>

<h6 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fn2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++a)</span><br><span class="line">&#125;<span class="comment">//1定义在外部</span></span><br><span class="line"><span class="comment">//不能使用const</span></span><br></pre></td></tr></table></figure>



<p>执行上下文: Execution Context Stack）</p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><h5 id="关键词-词法作用域-执行上下文-v8垃圾回收机制"><a href="#关键词-词法作用域-执行上下文-v8垃圾回收机制" class="headerlink" title="关键词:词法作用域;执行上下文;v8垃圾回收机制"></a>关键词:词法作用域;执行上下文;v8垃圾回收机制</h5><p>通俗的讲就是函数a的内部函数b，被函数a外部的一个变量引用的时候，就创建了一个闭包。</p>
<p>函数返回函数</p>
<h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol>
<li>内部变量</li>
<li>不会污染全局变量</li>
</ol>
<h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol>
<li>内存泄露</li>
<li>浪费内存</li>
</ol>
<h4 id="let-const-var"><a href="#let-const-var" class="headerlink" title="let   const    var"></a>let   const    var</h4><h6 id="var"><a href="#var" class="headerlink" title="var:"></a>var:</h6><ol>
<li>声明提升,不会报错</li>
<li>没有块级作用域{}会变成全局变量</li>
<li>可以重复命名</li>
</ol>
<h6 id="let"><a href="#let" class="headerlink" title="let"></a>let</h6><ol>
<li>不能重复定义</li>
<li>块级作用域</li>
<li>无变量提升</li>
<li>暂时性死区:块级作用域内含有lei,则不会看全局的变量</li>
<li>函数内不能声明形参</li>
</ol>
<h6 id="const"><a href="#const" class="headerlink" title="const"></a>const</h6><ol>
<li>声明简单数据类型不能改变</li>
<li>声明后必须赋值</li>
<li>有let 的特性</li>
</ol>
<h5 id="weakSet-WeakSet对象只可以存储对象数据，且只能有唯一值。尝试插入非对象数据类型时，会触发报错。add-delete-has"><a href="#weakSet-WeakSet对象只可以存储对象数据，且只能有唯一值。尝试插入非对象数据类型时，会触发报错。add-delete-has" class="headerlink" title="weakSet: WeakSet对象只可以存储对象数据，且只能有唯一值。尝试插入非对象数据类型时，会触发报错。add,delete,has"></a>weakSet: WeakSet对象只可以存储对象数据，且只能有唯一值。尝试插入非对象数据类型时，会触发报错。add,delete,has</h5><p>WeakSet存储的对象，如果没有其他的引用的话，这个对象将会被垃圾回收。这就是冠以 Weak 的原因，同时也意味着，WeakSet是不可枚举的，也就没有size</p>
<h5 id="weakMap-键名只能是对象"><a href="#weakMap-键名只能是对象" class="headerlink" title="weakMap:键名只能是对象"></a>weakMap:键名只能是对象</h5><h6 id="toString-2-转化为二进制"><a href="#toString-2-转化为二进制" class="headerlink" title="toString(2):转化为二进制"></a>toString(2):转化为二进制</h6><hr>
<p>writedocument.write 只能重绘整个页面<br>innerHTML 可以重绘页面的一部分</p>
<p>0.1+0.2</p>
<p>js采用64位双精度,符号位(1)指数位(11)有效位(52)</p>
<p>defer async</p>
<p>defer : 文档加载完毕后window.onload触发之前  </p>
<p>async: 异步下载好了就会执行</p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>函数变量提升</tag>
        <tag>闭包</tag>
        <tag>词法作用域</tag>
        <tag>let|const|var</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2022/04/02/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h4><h5 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h5><p>查询状态</p>
<h5 id="git-commit-m-“附加信息”"><a href="#git-commit-m-“附加信息”" class="headerlink" title="git commit -m “附加信息”"></a>git commit -m “附加信息”</h5><h5 id="git-remote-v"><a href="#git-remote-v" class="headerlink" title="git remote -v"></a>git remote -v</h5><p>查看是否添加仓库到本地</p>
<h4 id="git-remote-仓库别名-仓库地址"><a href="#git-remote-仓库别名-仓库地址" class="headerlink" title="git remote 仓库别名 仓库地址"></a>git remote 仓库别名 仓库地址</h4><h4 id="git-push-仓库别名-分支"><a href="#git-push-仓库别名-分支" class="headerlink" title="git push 仓库别名 分支"></a>git push 仓库别名 分支</h4><h4 id="git-checkout-分支"><a href="#git-checkout-分支" class="headerlink" title="git checkout 分支"></a>git checkout 分支</h4><p>切换或者创建分支</p>
<p>git branch  创建分支</p>
<p>git add -A</p>
]]></content>
      <categories>
        <category>git操作</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript</title>
    <url>/2022/05/03/typescript/</url>
    <content><![CDATA[<h4 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h4><h6 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h6><blockquote>
<ul>
<li>接口定义只读属性readonly</li>
</ul>
<p>readonly:变量作为属性</p>
<p>const:变量使用时</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">x</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">y</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">poin</span>:<span class="title class_">Point</span>=&#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">3</span>&#125;</span><br><span class="line">poin.<span class="property">x</span>=<span class="number">3</span><span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>接口函数类型</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span>&#123;</span><br><span class="line">    (<span class="attr">source</span>:<span class="built_in">string</span> ,<span class="attr">subString</span>:<span class="built_in">string</span>):<span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可索引类型接口</p>
<ul>
<li>共支持两种索引签名:字符串数字</li>
<li>索引签名是type script里的一个语法糖</li>
<li>所谓索引，就是根据一定的指向返回相应的值</li>
<li>比如数组的索引就是下标0,1,2….</li>
<li>type script里的索引签名有两种：数字索引和字符串索引(数字索引是字符串的子类型,数组中数字当作字符串)</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span>&#123;</span><br><span class="line">    [<span class="attr">index</span>:<span class="built_in">number</span>]:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">StringArray</span>=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>实现接口</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">    <span class="title function_">setTime</span>(<span class="attr">d</span>:<span class="title class_">Date</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">CalockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">    <span class="title function_">setTime</span>(<span class="params">d:<span class="built_in">Date</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentTime</span>=d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h:<span class="built_in">number</span></span>)&#123;&#125;</span><br><span class="line">&#125;<span class="comment">//类描述公有部分</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>接口继承</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">color</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">sideLength</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">square</span>:<span class="title class_">Square</span> =&#123;</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;rea&#x27;</span>,</span><br><span class="line">    <span class="attr">sideLength</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>混合类型</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    (<span class="attr">start</span>:<span class="built_in">number</span>):<span class="built_in">string</span></span><br><span class="line">   	<span class="attr">sinterval</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="title function_">reset</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="attr">getCounter</span>:<span class="title class_">Counter</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter=&lt;<span class="title class_">Counter</span>&gt;<span class="keyword">function</span> (<span class="params">start:<span class="built_in">number</span></span>)&#123;&#125;<span class="comment">///将let的counter断言为Counter</span></span><br><span class="line">    counter.<span class="property">interval</span>=<span class="number">123</span></span><br><span class="line">    counter.<span class="property">reset</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Counter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="类class-可以当作接口"><a href="#类class-可以当作接口" class="headerlink" title="类class(可以当作接口)"></a>类class(可以当作接口)</h6><blockquote>
<ul>
<li>关键字public都能访问,, protected内部和类能访问, private ,内部能访问</li>
</ul>
</blockquote>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">///抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printName</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Department name: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">printMeeting</span>(): <span class="built_in">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;Accounting and Auditing&#x27;</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printMeeting</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">generateReports</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Generating accounting reports...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">department</span>: <span class="title class_">Department</span>; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line">department = <span class="keyword">new</span> <span class="title class_">Department</span>(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> <span class="title class_">AccountingDepartment</span>(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.<span class="title function_">printName</span>();</span><br><span class="line">department.<span class="title function_">printMeeting</span>();</span><br><span class="line">department.<span class="title function_">generateReports</span>(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure>

<h6 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h6><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;<span class="attr">a</span>:<span class="built_in">number</span>,<span class="attr">b</span>:<span class="built_in">number</span>,<span class="attr">c</span>:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type</span>=&#123;</span><br><span class="line">    [key <span class="keyword">in</span> keyof <span class="title class_">Props</span>]:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





























































































































































]]></content>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/2022/04/06/js%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="测试地址-https-autumnfish-cn-api-joke"><a href="#测试地址-https-autumnfish-cn-api-joke" class="headerlink" title="测试地址 https://autumnfish.cn/api/joke"></a>测试地址 <a href="https://autumnfish.cn/api/joke">https://autumnfish.cn/api/joke</a></h4><p> <a href="https://blog.csdn.net/IT_ZHONG/article/details/103005828">链接大全</a>        </p>
<h6 id="原生js"><a href="#原生js" class="headerlink" title="原生js"></a>原生js</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>() <span class="comment">//创建实例</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">    		xhr.<span class="title function_">send</span>()<span class="comment">//发送</span></span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//post</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>() <span class="comment">//创建实例</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>(<span class="string">`username=<span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h6 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">get</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promiseGet</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">                xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">                xhr.<span class="title function_">send</span>()</span><br><span class="line">                xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.<span class="property">readyState</span>===<span class="number">4</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(xhr.<span class="property">status</span>&gt;=<span class="number">200</span>&amp;&amp;xhr.<span class="property">status</span>&lt;<span class="number">300</span>||xhr.<span class="property">status</span>==<span class="number">304</span>)&#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//post</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promisePost</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">                xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">                xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">                xhr.<span class="title function_">send</span>(<span class="string">`username=<span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">                xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>什么是 DOM 和 BOM？</p>
</blockquote>
<p>DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。<br>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</p>
]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript_experise</title>
    <url>/2022/05/03/typescript-experise/</url>
    <content><![CDATA[<h1 id="type-challenges"><a href="#type-challenges" class="headerlink" title="type-challenges"></a><a href="https://github.com/type-challenges">type-challenges</a></h1><ol>
<li><strong>00013-warm-hello-world</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">HelloWorld</span> = <span class="built_in">string</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>00004-easy-pick</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//联合类型:type union=&#x27;title&#x27;|&#x27;title&#x27;</span></span><br><span class="line"><span class="comment">//遍历联合类型union=&gt;    [key in k]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyPick</span>&lt;T, k <span class="keyword">extends</span> keyof T&gt; =&#123;</span><br><span class="line">  [key <span class="keyword">in</span> k]:T[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>00007-easy-readonly</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历接口用 keyof</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly</span>&lt;T&gt; = &#123;</span><br><span class="line"> <span class="keyword">readonly</span> [k <span class="keyword">in</span> keyof T]:T[k]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>00011-easy-tuple-to-object</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历数组用in T[number]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToObject</span> &lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; =&#123;</span><br><span class="line">   [k <span class="keyword">in</span>  T[<span class="built_in">number</span>]]: k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>00014-easy-first</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断空数组//never和T[0]取某一项</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = </span><br><span class="line">T <span class="keyword">extends</span> []?<span class="attr">never</span>:T[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//继承[]进行判断</span></span><br><span class="line">T[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span>?<span class="attr">never</span>:T[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//数组的length属性判断是否为空</span></span><br><span class="line">T[<span class="number">0</span>] <span class="keyword">extends</span> T[<span class="built_in">number</span>]?T[<span class="number">0</span>]:<span class="built_in">never</span></span><br><span class="line"><span class="comment">//如果为空,T[0]为undefined,T[number]为never</span></span><br><span class="line">T[<span class="built_in">number</span>] <span class="keyword">extends</span> <span class="built_in">never</span>?<span class="attr">never</span>:T[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//直接用T[number]进行判断</span></span><br><span class="line">T <span class="keyword">extends</span>[infer <span class="title class_">First</span>,...infer <span class="title class_">Rest</span>]?<span class="title class_">First</span>:<span class="built_in">never</span></span><br><span class="line"><span class="comment">//infer表示推断,理解为设一个变量//看看能不能解构出First,进行判断</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>00018-easy-tuple-length</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于传入变量的约束,以及length属性//typeof数组之后为只读类型,他只能分配给只读类型readonly</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Length</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = T[<span class="string">&quot;length&quot;</span>]</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>00043-easy-exclude</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//T和U是分布式的,对比继承会进行比较,(T是否在U中)一样的放在A里面,不一样的放在B里面,,最后返回的还是他俩同时的</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyExclude</span>&lt;T, U&gt; =T <span class="keyword">extends</span> U?<span class="attr">never</span>:T</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><strong>00189-easy-awaited</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//infer进行设变量..联想数学等式//递归判断然后是需要类型限制,在进行判断</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">unknown</span>&gt;&gt; =T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer U&gt;</span><br><span class="line">?U <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">unknown</span>&gt;</span><br><span class="line">  ?<span class="title class_">MyAwaited</span>&lt;U&gt;</span><br><span class="line">  :U</span><br><span class="line">:<span class="built_in">never</span></span><br><span class="line"><span class="comment">//限制类型之后进来判断的不属于promise就是返回值</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>00268-easy-if</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断加类型限制</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">If</span>&lt;C <span class="keyword">extends</span> <span class="built_in">boolean</span>, T, F&gt; = C <span class="keyword">extends</span> <span class="literal">true</span>?<span class="attr">T</span>:F</span><br></pre></td></tr></table></figure>

<ol start="10">
<li><strong>00533-easy-concat</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当成数组然后拓展运算符</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Concat</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">unknown</span>&gt;, U <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">unknown</span>&gt;&gt; =[...T,...U]</span><br></pre></td></tr></table></figure>

<ol start="11">
<li><strong>00898-easy-includes</strong></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>typescript 练习</tag>
      </tags>
  </entry>
  <entry>
    <title>v8垃圾回收机制</title>
    <url>/2022/05/06/v8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><ol>
<li>引用计数法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缺点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line">    obj1.<span class="property">a</span> = obj2</span><br><span class="line">    obj2.<span class="property">a</span> = obj1</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">//二者互相引用,引用数为1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>标记法(可达性)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据window或者global向下搜索,搜索到了就是标记,未搜索到就不标记(通过一个二进制字符来标记,进入环境离开环境)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缺点:清除之后剩余对象的相对位置是不变的,内存不连续</span></span><br></pre></td></tr></table></figure>



<h4 id="v8垃圾回收的算法-算法"><a href="#v8垃圾回收的算法-算法" class="headerlink" title="v8垃圾回收的算法(算法)"></a>v8垃圾回收的算法(算法)</h4><blockquote>
<p>分布式垃圾回收机制:新生代,老生代;两个垃圾回收器</p>
</blockquote>
<ul>
<li>新生代垃圾回收:两个区域:使用区和空闲区; 使用区快满的时候进行一次垃圾回收,还在使用的复制到空闲区,不使用的直接清理,使用区和回收区互换,如果一个对象多次复制还是未被清理则把他放入老生代</li>
<li>老生代垃圾回收:这些对象占用内存大,不适合回收,所以直接进行标记清除</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title>原理</title>
    <url>/2022/04/25/vue%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><blockquote>
<p>对象响应式</p>
<p>通过入口函数observe判断是否是对象,—&gt;new Observe()循环递归对象的属性调用defineReactive(obj,key)—&gt;进入函数的时候会调用observe判断obj[key]是不是对象,三则之间循环调用&#x2F;&#x2F;   在observe函数中会判断是不是数组如果是.则会改写原型,并且调用observeArray方法判断子项是不是数组</p>
</blockquote>
<hr>
<blockquote>
<p>收集依赖派发更新</p>
<p>在模板引擎运行时,当用户使用插值语法,此时new Watcher(),然后会触发watcher的get方法,重写get方法让他获取自己收集的数据,在获取收集数据时,就会触发defineReactive中的get方法,所以我们重写他的get方法让他可以将自身 (在Watcher中的get我们用window.target&#x3D;this(实例)命名)   收集到dep中,(_ <em>ob</em> _他身上储存着自己的依赖数组)&#x2F;&#x2F;此时Watcher方法get还没有走完,所以需要在最后把他为null,其他的数据也需要进行收集依赖,(抢夺window.target)&#x2F;&#x2F;&#x2F;   window.target就是Watcher实例(this&#x2F;&#x2F;此时并未完成实例化无new Watcher)</p>
<p>_ <em>ob</em> _的存在让他们可以简单的获取Observe的方法 ob &#x3D; new Observer(value)</p>
</blockquote>
<hr>
<blockquote>
<p>数组重写</p>
<p>创造一个中介arrayMethods&#x3D;Object.create(ArrayPrototype)    再将数据转化为响应式的时候(Observer)判断传入的不是数组,如果是强制改变原型Object.setPrototypeOf(value, arrayMethods)</p>
<p>重写方法就是添加更新视图操作,并且判断是不是添加数据splice,unshift,push,添加的数据也可能是响应式的.所以调用_ <em>ob</em> _中的observeArray方法循环监视(若在此通知更新视图,则需要dep.notify())</p>
</blockquote>
<hr>
<blockquote>
<p>工具函数的使用</p>
<p>def调用此函数可以改写数据并且让数据无法被遍历def(obj,value,false)</p>
<p>parsePath调用此函数可以识别点语法,obj.name.firstName</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的操作</span></span><br><span class="line">        <span class="keyword">let</span> arrayPrototype = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">        <span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayPrototype)</span><br><span class="line">        <span class="title class_">MethodsNeedChange</span> = [</span><br><span class="line">            <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sort&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将一个属性变化为响应式</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val = obj[key]</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()<span class="comment">//闭包//让get.set调用</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//观察新增的和修改的val//子元素形成递归</span></span><br><span class="line">            <span class="keyword">let</span> childOb = <span class="title function_">observe</span>(val)</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监视&#x27;</span>, key)</span><br><span class="line">                    <span class="comment">//判断是否是依赖收集阶段</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">                        dep.<span class="title function_">depend</span>()</span><br><span class="line">                        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">                            childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> val</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改&#x27;</span>, key, newVal)</span><br><span class="line">                    val = newVal</span><br><span class="line">                    childOb = <span class="title function_">observe</span>(newVal)</span><br><span class="line">                    dep.<span class="title function_">notify</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将对象转化为响应式</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">                <span class="comment">//给内部添加__obj__属性,并且不可枚举</span></span><br><span class="line">                <span class="title function_">def</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="variable language_">this</span>, <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">                    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(value, arrayMethods)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历对象的属性</span></span><br><span class="line">            <span class="title function_">walk</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">                    <span class="title function_">defineReactive</span>(value, key)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//数组的特殊操作</span></span><br><span class="line">            <span class="title function_">observeArray</span>(<span class="params">value</span>) &#123;<span class="comment">//防止数组长度发生变化let len</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = value.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    <span class="title function_">observe</span>(value[i])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//入口函数,判断,递归的开始</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">var</span> ob<span class="comment">//存储实例属性</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value.<span class="property">__ob__</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">                ob = value.<span class="property">__ob__</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ob = <span class="keyword">new</span> <span class="title class_">Observer</span>(value)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ob</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//工具函数让属性不被遍历</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">def</span>(<span class="params">obj, key, value, enumerable</span>) &#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">                value,</span><br><span class="line">                enumerable</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组方法的改写</span></span><br><span class="line">        <span class="title class_">MethodsNeedChange</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> original = arrayPrototype[methodName]</span><br><span class="line"></span><br><span class="line">            <span class="title function_">def</span>(arrayMethods, methodName, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> ob = <span class="variable language_">this</span>.<span class="property">__ob__</span><span class="comment">//这里面有很多方法用于响应式</span></span><br><span class="line">                <span class="comment">//push/splice/unshift</span></span><br><span class="line">                <span class="keyword">let</span> inserted = []</span><br><span class="line">                <span class="keyword">switch</span> (methodName) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">                        inserted = [...<span class="variable language_">arguments</span>]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">                        inserted = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inserted.<span class="property">length</span>) &#123;</span><br><span class="line">                    ob.<span class="title function_">observeArray</span>(inserted)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;来来来&#x27;</span>)</span><br><span class="line">                <span class="keyword">let</span> res = original.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">                ob.<span class="property">dep</span>.<span class="title function_">notify</span>()<span class="comment">//ob中保存dep属性</span></span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            &#125;, <span class="literal">false</span>)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集依赖</span></span><br><span class="line">        <span class="keyword">let</span> uid1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//存储自己的订阅则</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">subs</span> = []<span class="comment">//存放watcher实例</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">id</span> = uid1++</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加订阅</span></span><br><span class="line">            <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加依赖//window全局位置</span></span><br><span class="line">            <span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">addSub</span>(<span class="variable language_">window</span>.<span class="property">target</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通知更新</span></span><br><span class="line">            <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">                <span class="keyword">const</span> subs = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">slice</span>()</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = subs.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    suns[i].<span class="title function_">update</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//观察模板</span></span><br><span class="line">        <span class="keyword">let</span> uid2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">target, expression, callback</span>) &#123;<span class="comment">//监听对象//表达式//回调函数</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">id</span> = uid2++</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">target</span> = target</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">getter</span> = <span class="title function_">parsePath</span>(expression)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进入依赖收集阶段</span></span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span><br><span class="line">                <span class="keyword">const</span> obj = <span class="variable language_">this</span>.<span class="property">target</span></span><br><span class="line">                <span class="keyword">let</span> value</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    value = <span class="variable language_">this</span>.<span class="title function_">getter</span>(obj)</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//运作</span></span><br><span class="line">            <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">getAndInvoke</span>(<span class="variable language_">this</span>.<span class="property">callback</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//刺激一下</span></span><br><span class="line">            <span class="title function_">getAndInvoke</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">                <span class="keyword">if</span> (value !== <span class="variable language_">this</span>.<span class="property">value</span> || <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">                    callback.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">target</span>, value, oldValue)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//工具函数辨别点语法找到数据</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">parsePath</span>(<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> segments = str.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> segments) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!obj) <span class="keyword">return</span></span><br><span class="line">                    obj = obj[i]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(parsePath(&#x27;a.c.d&#x27;)(&#123;a:&#123;c:&#123;d:1&#125;&#125;&#125;))</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">001</span>,</span><br><span class="line">            <span class="attr">identity</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">17</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">grades</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">observe</span>(obj)</span><br><span class="line">        <span class="comment">// obj.grades.push(12)</span></span><br><span class="line">        <span class="comment">// console.log(obj.__ob__)</span></span><br><span class="line">        obj.<span class="property">id</span> = <span class="number">111</span></span><br><span class="line">        <span class="comment">// obj.identity.age=12</span></span><br><span class="line">        <span class="comment">// console.log(obj.identity.age)</span></span><br><span class="line">        <span class="comment">// obj.grades.push(4)</span></span><br><span class="line">        <span class="comment">// obj.grades.splice(2, 1, 5, 6)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// console.log(obj.grades)</span></span><br><span class="line">        <span class="comment">// obj.id=0</span></span><br></pre></td></tr></table></figure>



<hr>
<hr>
<h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><h4 id="diff算法-dom数据化"><a href="#diff算法-dom数据化" class="headerlink" title="diff算法(dom数据化)"></a>diff算法(dom数据化)</h4><p>Vue2递归+双指针  </p>
<ol>
<li>判断是不是同一元素,不是则替换.</li>
<li>是同一元素&gt;&gt;比对属性&gt;&gt;儿子节点(都有儿子节点则双指针遍历)</li>
</ol>
<p>Vue3最长递增子数列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模板解析语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span><span class="comment">//将配置对象传到自身</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">$el</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">compile</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">childNodes</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(item.<span class="property">nodeType</span>===<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compile</span>(item)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(item.<span class="property">nodeType</span>===<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> reg=<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span></span><br><span class="line">                <span class="keyword">let</span> text=item.<span class="property">textContent</span></span><br><span class="line">                item.<span class="property">textContent</span>=text.<span class="title function_">replace</span>(reg,<span class="function">(<span class="params">match,vmKey</span>)=&gt;</span>&#123;</span><br><span class="line">                    vmKey=vmKey.<span class="title function_">trim</span>()</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$data</span>[vmKey]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><blockquote>
<p>可以改变URL，但不会触发页面重新加载（hash的改变会记录在window.hisotry中）因此并不算是一次http请求，所以这种模式不利于SEO优化<br>只能修改#后面的部分，因此只能跳转与当前URL同文档的URL<br>只能通过字符串改变URL<br>通过window.onhashchange监听hash的改变，借此实现无刷新跳转的功能。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line"><span class="comment">//点击改变</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    location.<span class="property">href</span>=<span class="string">&#x27;#/222&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//通过前进后退和地址栏改变</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span>=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">oldURL</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">newURL</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dom加载完毕打印</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><blockquote>
<p>新的URL可以是与当前URL同源的任意 URL，也可以与当前URL一样，但是这样会把重复的一次操作记录到栈中<br>通过参数stateObject可以添加任意类型的数据到记录中<br>可额外设置title属性供后续使用<br>通过pushState、replaceState实现无刷新跳转的功能(go)</p>
<p>缺点</p>
<p>当应用通过vue-router跳转到某个页面后，因为此时是前端路由控制页面跳转，虽然url改变，但是页面只是内容改变，并没有重新请求，所以这套流程没有任何问题。但是，如果在当前的页面刷新一下，此时会重新发起请求，如果nginx没有匹配到当前url，就会出现404的页面。那为什么hash模式不会出现这个问题呢?因为hash虽然可以改变URL，但不会被包括在HTTP请求中。它被用来指导浏览器动作，并不影响服务器端，因此，改变hash并没有改变url，所以页面路径还是之前的路径，nginx不会拦截。<br>因此，切记在使用history模式时，需要服务端允许地址可访问，否则就会出现404的尴尬场景。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line"><span class="comment">//点击改变</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = &#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;</span><br><span class="line">    history.<span class="title function_">pushState</span>(state, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//dom加载完毕打印</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;path:&#x27;</span>, <span class="string">&#x27;@@@&#x27;</span>, location.<span class="property">pathname</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听浏览器前进后退</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onpopstate</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onpopstate&#x27;</span>, <span class="string">&#x27;@@@&#x27;</span>, e.<span class="property">state</span>, location.<span class="property">pathname</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>vue原理</category>
      </categories>
      <tags>
        <tag>响应式原理</tag>
        <tag>diff算法</tag>
        <tag>vue路由</tag>
      </tags>
  </entry>
  <entry>
    <title>vue面试题</title>
    <url>/2022/04/11/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h5 id="初始化项目-vue-create"><a href="#初始化项目-vue-create" class="headerlink" title="初始化项目 vue create"></a>初始化项目 vue create</h5><h5 id="语法检测eslint关闭-lintOnSave-false"><a href="#语法检测eslint关闭-lintOnSave-false" class="headerlink" title="语法检测eslint关闭   lintOnSave: false,"></a>语法检测eslint关闭   lintOnSave: false,</h5><h5 id="监听属性的深度监听因为handle函数拿不到对象-引用类型-的oldvalue-立即监听-watch监听路由数据变化"><a href="#监听属性的深度监听因为handle函数拿不到对象-引用类型-的oldvalue-立即监听-watch监听路由数据变化" class="headerlink" title="监听属性的深度监听因为handle函数拿不到对象(引用类型)的oldvalue,立即监听    watch监听路由数据变化"></a>监听属性的深度监听因为handle函数拿不到对象(引用类型)的oldvalue,立即监听    watch监听路由数据变化</h5><p>computed和methods相比前者有缓存,后者无缓存</p>
<p>computed和watch相比计算一个,监控多个个时候比较麻烦</p>
<h6 id="v-if-不去渲染-一次性改变-v-show设置dispaly-none-x2F-block-频繁改变-会增加渲染"><a href="#v-if-不去渲染-一次性改变-v-show设置dispaly-none-x2F-block-频繁改变-会增加渲染" class="headerlink" title="v-if,不去渲染(一次性改变),v-show设置dispaly:none&#x2F;block(频繁改变),会增加渲染"></a>v-if,不去渲染(一次性改变),v-show设置dispaly:none&#x2F;block(频繁改变),会增加渲染</h6><h5 id="绑定样式类名-style-class对象数组形式"><a href="#绑定样式类名-style-class对象数组形式" class="headerlink" title="绑定样式类名 :style class对象数组形式"></a>绑定样式类名 :style class对象数组形式</h5><h5 id="v-for-遍历对象的时候拿到的值-value-key-index"><a href="#v-for-遍历对象的时候拿到的值-value-key-index" class="headerlink" title="v-for 遍历对象的时候拿到的值(value,key,index)"></a>v-for 遍历对象的时候拿到的值(value,key,index)</h5><p>不能和v-if连用,v-for优先级高,导致已经渲染出来了v-if判断又要删除掉,浪费性能,可以在v-for外面增加一层template将其设置为v-if,,,,,, 优先级源码判断if条件的时候once-&gt;for-&gt;if</p>
<h5 id="methods方法里面的e-e-target-原生事件-e-target-constructor-event-传多个参数"><a href="#methods方法里面的e-e-target-原生事件-e-target-constructor-event-传多个参数" class="headerlink" title="methods方法里面的e,e.target,原生事件,e.target.constructor,,,,$event(传多个参数)"></a>methods方法里面的e,e.target,原生事件,e.target.constructor,,,,$event(传多个参数)</h5><h5 id="组件传信props-emit-bus-mounted挂载-beforeDetroy解绑"><a href="#组件传信props-emit-bus-mounted挂载-beforeDetroy解绑" class="headerlink" title="组件传信props,$emit,$bus(mounted挂载,beforeDetroy解绑)"></a>组件传信props,$emit,$bus(mounted挂载,beforeDetroy解绑)</h5><h5 id="生命周期钩子-beforeUpdated先父后子update先子后父"><a href="#生命周期钩子-beforeUpdated先父后子update先子后父" class="headerlink" title="生命周期钩子,beforeUpdated先父后子update先子后父"></a>生命周期钩子,beforeUpdated先父后子update先子后父</h5><h5 id="nextTick-vue渲染方式是异步的-会在下一个tick渲染会导致慢一步-这个方法会在异步渲染完毕后执行-批量进行渲染-在轮播图组件-x2F-x2F-x2F-x2F-vue异步更新原因是减少频繁更新性能浪费-在本轮操作结束后再更新-x2F-x2F-x2F-nextTick-采用宏任务微任务即promise-settimeout-setInmediate回调"><a href="#nextTick-vue渲染方式是异步的-会在下一个tick渲染会导致慢一步-这个方法会在异步渲染完毕后执行-批量进行渲染-在轮播图组件-x2F-x2F-x2F-x2F-vue异步更新原因是减少频繁更新性能浪费-在本轮操作结束后再更新-x2F-x2F-x2F-nextTick-采用宏任务微任务即promise-settimeout-setInmediate回调" class="headerlink" title="$nextTick,vue渲染方式是异步的,会在下一个tick渲染会导致慢一步,,这个方法会在异步渲染完毕后执行(批量进行渲染),在轮播图组件&#x2F;&#x2F;&#x2F;&#x2F;vue异步更新原因是减少频繁更新性能浪费,在本轮操作结束后再更新&#x2F;&#x2F;&#x2F;nextTick 采用宏任务微任务即promise,settimeout,setInmediate回调"></a>$nextTick,vue渲染方式是异步的,会在下一个tick渲染会导致慢一步,,这个方法会在异步渲染完毕后执行(批量进行渲染),在轮播图组件&#x2F;&#x2F;&#x2F;&#x2F;vue异步更新原因是减少频繁更新性能浪费,在本轮操作结束后再更新&#x2F;&#x2F;&#x2F;nextTick 采用宏任务微任务即promise,settimeout,setInmediate回调</h5><p>原因:到这里，整体nextTick的代码都分析完毕了，总结一下它的流程就是：</p>
<p>把回调函数放入callbacks等待执行</p>
<p>将执行函数放到微任务或者宏任务中</p>
<p>事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调</p>
<p>再回到我们开头说的setTimeout，可以看出来nextTick是对setTimeout进行了多种兼容性的处理，宽泛的也可以理解为将回调函数放入setTimeout中执行；不过nextTick优先放入微任务执行，而setTimeout是宏任务，因此nextTick一般情况下总是先于setTimeout执行，我们可以在浏览器中尝试一下：</p>
<p><a href="https://blog.csdn.net/ych6666/article/details/112428797">相关链接</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="插槽slot-x2F-作用域插槽-父组件引用子组件-在父组件的子组件填东西-子组件挖坑-可以设置默认内容-作用域插槽子中有数据给父亲传-父亲解构接受"><a href="#插槽slot-x2F-作用域插槽-父组件引用子组件-在父组件的子组件填东西-子组件挖坑-可以设置默认内容-作用域插槽子中有数据给父亲传-父亲解构接受" class="headerlink" title="插槽slot&#x2F;作用域插槽,父组件引用子组件,在父组件的子组件填东西,子组件挖坑(可以设置默认内容),,,,作用域插槽子中有数据给父亲传,父亲解构接受"></a>插槽slot&#x2F;作用域插槽,父组件引用子组件,在父组件的子组件填东西,子组件挖坑(可以设置默认内容),,,,作用域插槽子中有数据给父亲传,父亲解构接受</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父</span></span><br><span class="line">&lt;<span class="title class_">Child</span>&gt;</span><br><span class="line">         <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123;user&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;&#123;user.age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">    &lt;/<span class="title class_">Child</span>&gt;</span><br><span class="line"><span class="comment">//子</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:user</span>=<span class="string">&#x27;user&#x27;</span>&gt;</span> &#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="动态渲染组件再父组件中设置"><a href="#动态渲染组件再父组件中设置" class="headerlink" title="动态渲染组件再父组件中设置"></a>动态渲染组件再父组件中设置</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;component :is=<span class="string">&quot;data&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line"><span class="comment">//data最终结果要和组件名相同,则展示</span></span><br></pre></td></tr></table></figure>

<h5 id="异步组件-组件加上v-if-在页面开始挂载的时候将所有需要的东西下载了-即使v-if为false-即显示组件时不在重新发送网络请求-会导致首次加载影响性能-import语法"><a href="#异步组件-组件加上v-if-在页面开始挂载的时候将所有需要的东西下载了-即使v-if为false-即显示组件时不在重新发送网络请求-会导致首次加载影响性能-import语法" class="headerlink" title="异步组件, 组件加上v-if,在页面开始挂载的时候将所有需要的东西下载了,即使v-if为false,即显示组件时不在重新发送网络请求,,,, 会导致首次加载影响性能,import语法,"></a>异步组件, 组件加上v-if,在页面开始挂载的时候将所有需要的东西下载了,即使v-if为false,即显示组件时不在重新发送网络请求,,,, 会导致首次加载影响性能,import语法,</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">Child</span>:<span class="function">()=&gt;</span><span class="keyword">import</span> (<span class="string">&#x27;./components/Child&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态引入返回promise对象//路由懒加载,组件懒加载</span></span><br><span class="line"><span class="comment">//webpack会将懒加载的路由分块打包到一个单独的js中去，只有加载该路由的时候，才会加载这个chunk文件。</span></span><br></pre></td></tr></table></figure>

<h5 id="keep-alive-提升性能-组件来回切换加载一次后则不会销毁keep-alive-而尽量不要使用v-show因为一次性加载太多东西影响性能-组件简单可以使用-多两个钩子activated-deactivated"><a href="#keep-alive-提升性能-组件来回切换加载一次后则不会销毁keep-alive-而尽量不要使用v-show因为一次性加载太多东西影响性能-组件简单可以使用-多两个钩子activated-deactivated" class="headerlink" title="keep-alive,(提升性能),   组件来回切换加载一次后则不会销毁keep-alive,而尽量不要使用v-show因为一次性加载太多东西影响性能,组件简单可以使用,,,, 多两个钩子activated,deactivated"></a>keep-alive,(提升性能),   组件来回切换加载一次后则不会销毁keep-alive,而尽量不要使用v-show因为一次性加载太多东西影响性能,组件简单可以使用,,,, 多两个钩子activated,deactivated</h5><p>如果要在进入缓存的组件 发送数据需要在activated钩子中发送请求</p>
<h5 id="生命周期-create-mounte-updated-destroied-加入keep-alive包裹标签-多两个钩子activated-deactivated-每次离开都会执行"><a href="#生命周期-create-mounte-updated-destroied-加入keep-alive包裹标签-多两个钩子activated-deactivated-每次离开都会执行" class="headerlink" title="生命周期 create,mounte,updated,destroied,,,, 加入keep-alive包裹标签,多两个钩子activated,deactivated(每次离开都会执行)"></a>生命周期 create,mounte,updated,destroied,,,, 加入keep-alive包裹标签,多两个钩子activated,deactivated(每次离开都会执行)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeCreate<span class="comment">//啥也没有</span></span><br><span class="line">create<span class="comment">//data没有$el</span></span><br><span class="line">beforeMount<span class="comment">//data没有$el</span></span><br><span class="line">mounted<span class="comment">//都有</span></span><br></pre></td></tr></table></figure>



<h5 id="scoped样式独立-样式穿透某些属性需要让别的生效-sass-x2F-less-v-deep-x2F-子元素-css-gt-gt-gt"><a href="#scoped样式独立-样式穿透某些属性需要让别的生效-sass-x2F-less-v-deep-x2F-子元素-css-gt-gt-gt" class="headerlink" title="scoped样式独立,,,样式穿透某些属性需要让别的生效,sass&#x2F;less     ::v-deep&#x2F;子元素,,,,    css     &gt;&gt;&gt;"></a>scoped样式独立,,,样式穿透某些属性需要让别的生效,sass&#x2F;less     ::v-deep&#x2F;子元素,,,,    css     &gt;&gt;&gt;</h5><h5 id="props和data优先级谁高props-gt-methods-gt-data-gt-computed-gt-watch"><a href="#props和data优先级谁高props-gt-methods-gt-data-gt-computed-gt-watch" class="headerlink" title="props和data优先级谁高props-&gt;methods-&gt;data-&gt;computed-&gt;watch"></a>props和data优先级谁高props-&gt;methods-&gt;data-&gt;computed-&gt;watch</h5><hr>
<h4 id="vuex-状态管理-state-getters-mutations-同步操作-actions-异步操作-mapstate"><a href="#vuex-状态管理-state-getters-mutations-同步操作-actions-异步操作-mapstate" class="headerlink" title="vuex 状态管理(state,getters,mutations(同步操作),actions(异步操作))(mapstate)"></a>vuex 状态管理(state,getters,mutations(同步操作),actions(异步操作))(mapstate)</h4><p>单向数据流组件不能改变&#x2F;不是持久化存储(保存到cookie,localstorage)</p>
<h5 id="vue代理"><a href="#vue代理" class="headerlink" title="vue代理"></a>vue代理</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跨域问题:vue.config.js文件中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:4000&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="vue打包后空白页问题-1-路径问题-publicPath-’-x2F-‘-2-路由模式-hash模式有-出现问题-后端重定向-3-跨域问题模式和环境变量"><a href="#vue打包后空白页问题-1-路径问题-publicPath-’-x2F-‘-2-路由模式-hash模式有-出现问题-后端重定向-3-跨域问题模式和环境变量" class="headerlink" title="vue打包后空白页问题   1. 路径问题 (publicPath:’.&#x2F;‘)2. 路由模式(hash模式有#出现问题)[后端重定向]  3. 跨域问题模式和环境变量"></a>vue打包后空白页问题   1. 路径问题 (publicPath:’.&#x2F;‘)2. 路由模式(hash模式有#出现问题)[后端重定向]  3. 跨域问题模式和环境变量</h5><h6 id="vue-router-模式history-hash-history会发送请求-hash不会-找不到页面的时候"><a href="#vue-router-模式history-hash-history会发送请求-hash不会-找不到页面的时候" class="headerlink" title="vue-router 模式history,hash#       history会发送请求,hash不会(找不到页面的时候)"></a>vue-router 模式history,hash#       history会发送请求,hash不会(找不到页面的时候)</h6><h5 id="SPA单页面应用-SEO优化不好-性能不好"><a href="#SPA单页面应用-SEO优化不好-性能不好" class="headerlink" title="SPA单页面应用:SEO优化不好,性能不好"></a>SPA单页面应用:SEO优化不好,性能不好</h5><p>vue路径传值:    会在路径上显示出来query</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 显式</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//接this.route.query</span></span><br><span class="line"><span class="number">2.</span> 隐式</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//接this.$route.params</span></span><br></pre></td></tr></table></figure>



<h5 id="路由导航守卫-全局-路由独享-组件内"><a href="#路由导航守卫-全局-路由独享-组件内" class="headerlink" title="路由导航守卫:  全局  路由独享  组件内"></a>路由导航守卫:  全局  路由独享  组件内</h5><p>全局路由守卫   </p>
<ol>
<li><p>全局守卫：前置守卫：beforeEach 后置钩子：afterEach</p>
</li>
<li><p>单个路由守卫：独享守卫：beforeEnter</p>
</li>
<li><p>组件内部守卫：beforeRouteEnter beforeRouteUpdate beforeRouteLeave</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>路由独享守卫:beforeEnter</p>
<p>组件内守卫:beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">proxyData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">$data</span>)&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,key,&#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$data</span>[key]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$data</span>[key]=val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在渲染的时候将元素存储到对象中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> p=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#p&#x27;</span>)<span class="comment">//展示内容</span></span><br><span class="line">        <span class="keyword">let</span> obj=&#123;&#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">                p.<span class="property">innerHTML</span>=val</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            obj.<span class="property">name</span>=e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>





<h5 id="视图更新"><a href="#视图更新" class="headerlink" title="视图更新"></a>视图更新</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watch</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">vm,key,node,attr</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vm</span>=vm<span class="comment">//对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">key</span>=key<span class="comment">//属性名</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>=node<span class="comment">//节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">att</span>=attr<span class="comment">//改变文本内容的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>[<span class="variable language_">this</span>.<span class="property">attr</span>]=<span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>]<span class="comment">//赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h5><h5 id="Vue中key的作用"><a href="#Vue中key的作用" class="headerlink" title="Vue中key的作用"></a>Vue中key的作用</h5><p>可以在patch过程中判断新老加点是否相同,能否复用(不为index因为有时不在列表最后新增元素)</p>
<h5 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//proxy</span></span><br><span class="line"><span class="keyword">const</span> p=<span class="keyword">new</span> <span class="title class_">Proxy</span>(target,handler)</span><br></pre></td></tr></table></figure>







<p>是Writable：决定是否可以修改属性的值；<br>另一个是Configurable：决定是否可以使用Object.defineProperty()来修改属性描述符，并且也会禁止删除这个属性；<br>当这两个描述符同时为false时，意味着这个属性完全是一个常量，Vue不能通过Object.defineProperty()来添加双向数据绑定。收集不了依赖，也就做不了双向数据绑定，就少添加很多watcher实例</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol>
<li>编码优化</li>
</ol>
<ul>
<li>不要把太多的数据放入data中,发布订阅模式会收集多个watcher</li>
<li>v-for的时候使用事件代理</li>
<li>拆分组件复用</li>
<li>多用v-if,</li>
<li>路由懒加载</li>
</ul>
<ol start="2">
<li>加载优化</li>
</ol>
<ul>
<li>按需加载第三方模块</li>
<li>图片懒加载</li>
</ul>
<ol start="3">
<li>打包优化</li>
</ol>
<ul>
<li>cdn加载第三方模块(防止代码体积过大,防止服务器不稳定)</li>
</ul>
<h4 id="防止xss攻击"><a href="#防止xss攻击" class="headerlink" title="防止xss攻击"></a>防止xss攻击</h4><p>不使用v-html和innerhtml</p>
<p>解决方法: 可以使用lodash里面的escape方法对客户信息进行转译</p>
]]></content>
      <categories>
        <category>面试</category>
        <category>vue总结知识点</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack学习</title>
    <url>/2022/04/25/webpack%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h5 id="暴露语法"><a href="#暴露语法" class="headerlink" title="暴露语法"></a>暴露语法</h5><ol>
<li><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">add</span> (a, b) &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">		........</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////////////</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">require</span>(<span class="string">&#x27;./test&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>es6模块化暴露</li>
</ol>
<ul>
<li>分别暴露</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露//</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; &#123; &#125;</span><br><span class="line"><span class="comment">// 对外暴露的实质是 &#123;a,getData&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按需引入【逐个引入】</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,getData&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br><span class="line"><span class="comment">// 全部引入【统一引入】</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Dome</span> <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入暴露</span></span><br><span class="line"><span class="keyword">export</span> &#123;a,getData&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span> 【暴露的为多个单个数据，模块化不合适】</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> <span class="title class_">Dome</span> <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span> 【暴露的为一个模块】</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露的实质是 ： &#123;Dome:&#123;a,getData&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>统一暴露</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getApp</span> = (<span class="params"></span>) =&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">	a,</span><br><span class="line">    getApp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对外暴露的实质是 ： &#123;a,getApp&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按需引入【逐个引入】</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,getApp&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br><span class="line"><span class="comment">// 全部引入【统一引入】</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Dome</span> <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;a,getAPP&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span> 【暴露的为多个单个数据，模块化不合适】</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> <span class="title class_">Dome</span> <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span> 【暴露的为一个模块，模块化常用】</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露的实质是： &#123;Dome:&#123;a,getApp&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认暴露</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">=========== 书写方法一 ==========</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">getBpp</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">a</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">========== 书写方法二 ==============</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>,</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getBpp</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a,</span><br><span class="line">    getBpp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对外暴露的实质是 ： &#123;default:&#123;a,getBpp&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简写形式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Dome</span> <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br><span class="line"><span class="comment">// 完整形式</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Dome</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Dome</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br><span class="line"><span class="comment">// 暴露的实质是：&#123;Dome:&#123;a,getBpp&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对外暴露出的都是一个对象，但是不同的暴露方法实际暴露的对象有所不同</li>
<li>默认并暴露的实质就是使用 export ➕ 去除import关键字后的引入写法</li>
<li>默认暴露在进行引入并暴露时不能进行简写</li>
<li>import引入的文件会自动收集在文件的最上方，并按照引入的顺序执行</li>
</ul>
<hr>
<hr>
<h2 id="webpack构建步骤-命令行"><a href="#webpack构建步骤-命令行" class="headerlink" title="webpack构建步骤(命令行)"></a>webpack构建步骤(命令行)</h2><ol>
<li>npm init -y</li>
<li>npm install webpack webpack-cli –save-dve</li>
<li>npx webpack –watch(自动更新)</li>
<li>npx webpack-dev-server(npx自身项目webpack)自动页面刷新,,,为输出物理文件,将打包的文件放在了内存里面</li>
<li>插件安装   npm install html-webpack-plugin -D</li>
<li>浏览器自动更新     npm install webpack-dev-server -D</li>
</ol>
<blockquote>
<p>npm代表下载包</p>
<p>npx是从node_nodules中的.bin中当作环境变量进行运行</p>
<p>npx webpack是从webpack文件中读取webpack.config.js,按照他打包</p>
</blockquote>
<p>开发模式:1. 编译代码;2. 规范代码</p>
<h3 id="基本目录"><a href="#基本目录" class="headerlink" title="基本目录"></a>基本目录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="处理css资源"><a href="#处理css资源" class="headerlink" title="处理css资源"></a>处理css资源</h3><p>根据规则自下向上打包</p>
<p>先将css文件加载到common.js中再动态生成style标签</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br><span class="line">npm i less-loader -D</span><br><span class="line">npm i sass-loader sass -D</span><br><span class="line">npm i stylus-loader -D</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="comment">//检测开发文件</span></span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&quot;style-loader&quot;</span>,<span class="comment">//将js从CSS通过style标签添加到html文件</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span><span class="comment">//将CSS资源编译到commonjs的模块的js中</span></span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">        <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">        <span class="comment">// 将 JS 字符串生成为 style 节点</span></span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="comment">// 将 CSS 转化成 CommonJS 模块</span></span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="comment">// 将 Sass 编译成 CSS</span></span><br><span class="line">        <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h3><p>小图片转化为base64</p>
<p>因为图片资源会发送请求,转化为base64则是字符串,减少请求次数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.jpg/</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">    <span class="attr">parser</span>: &#123;</span><br><span class="line">        <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">200</span> * <span class="number">1024</span> <span class="comment">// 小于10kb,减少发送请求次数(将他转化为了字符串)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;static/images/[hash:10][ext][query]&#x27;</span><span class="comment">//hash值生成唯一图片名称只取十位</span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理字体图标-音视频"><a href="#处理字体图标-音视频" class="headerlink" title="处理字体图标(音视频)"></a>处理字体图标(音视频)</h3><ol>
<li>阿里矢量图标库</li>
<li>添加购物车</li>
<li>创建文件</li>
<li>下载解压</li>
<li>打开index.html</li>
<li>复制class名称</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?|mp3|mp4|avi)$/</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,<span class="comment">//不被改变为base64</span></span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;static/media/[hash:10][ext][query]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="处理js资源eslint-bable"><a href="#处理js资源eslint-bable" class="headerlink" title="处理js资源eslint|bable"></a>处理js资源eslint|bable</h3><h5 id="eslint"><a href="#eslint" class="headerlink" title="eslint:"></a>eslint:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//npm install eslint-webpack-plugin --save-dev</span><br><span class="line">//npm install eslint --save-dev</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">        <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>.eslintignore文件,写入”dist”该文件不会被插件检查</p>
</blockquote>
<p>babel</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="处理html资源"><a href="#处理html资源" class="headerlink" title="处理html资源"></a>处理html资源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">//找到模板</span></span><br><span class="line">    <span class="attr">template</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="自动化打包"><a href="#自动化打包" class="headerlink" title="自动化打包"></a>自动化打包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开发服务器</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="开发模式与生产模式"><a href="#开发模式与生产模式" class="headerlink" title="开发模式与生产模式"></a>开发模式与生产模式</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;webpack serve --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span><span class="string">&quot;webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>production</p>
<p>development</p>
</blockquote>
<h3 id="提取css文件-MiniCssExtractPlugin"><a href="#提取css文件-MiniCssExtractPlugin" class="headerlink" title="提取css文件(MiniCssExtractPlugin)"></a>提取css文件(MiniCssExtractPlugin)</h3><blockquote>
<p>传统方式是先将CSS引入到js文件中然后生成css标签,会有闪屏现象</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>:<span class="string">&#x27;static/css/main.css&#x27;</span></span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="css兼容性处理"><a href="#css兼容性处理" class="headerlink" title="css兼容性处理"></a>css兼容性处理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置写在css_loader下面,less_loader上面</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pack.json文件</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;last 2 version&quot;</span><span class="punctuation">,</span> <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span> <span class="string">&quot;not dead&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="合并配置"><a href="#合并配置" class="headerlink" title="合并配置"></a>合并配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CSS兼容性处理的时候可以写出函数复用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,<span class="comment">//提取CSS为单独文件</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,<span class="comment">//将CSS资源编译到commonjs的模块的js中</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                        <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        pre</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CSS压缩"><a href="#CSS压缩" class="headerlink" title="CSS压缩"></a>CSS压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install css-minimizer-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br></pre></td></tr></table></figure>































































































































































































































]]></content>
      <categories>
        <category>webpack学习</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试</title>
    <url>/2022/04/03/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/</url>
    <content><![CDATA[<h6 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h6><p>协议+端口+域名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Jsonp</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">req</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = req.<span class="property">url</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbackName</span> = req.<span class="property">callbackName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.url&#125;</span>?callback=<span class="subst">$&#123;<span class="variable language_">this</span>.callbackName&#125;</span>`</span>;</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cors方法解决</p>
<ol>
<li>设置请求响应头orgin和添加access-control-allow-orgin   * </li>
<li>有cookie时请求头:withCredentials: true:  服务端设置Access-Control-Allow-Credentials: true;;;;access-control-allow-orgin   不能为星号</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>同源策略</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>博客初始化</title>
    <url>/2022/04/02/%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><h4 id="cnpm-install-hexo-g"><a href="#cnpm-install-hexo-g" class="headerlink" title="cnpm install hexo -g"></a>cnpm install hexo -g</h4><h4 id="创建文件夹，hexo-init"><a href="#创建文件夹，hexo-init" class="headerlink" title="创建文件夹，hexo init"></a>创建文件夹，hexo init</h4><h4 id="hexo-s-运行"><a href="#hexo-s-运行" class="headerlink" title="hexo s 运行"></a>hexo s 运行</h4><h4 id="hexo-g产生静态资源"><a href="#hexo-g产生静态资源" class="headerlink" title="hexo g产生静态资源"></a>hexo g产生静态资源</h4><h4 id="hexo-clean-打扫"><a href="#hexo-clean-打扫" class="headerlink" title="hexo clean 打扫"></a>hexo clean 打扫</h4><h4 id="hexo-d-上传"><a href="#hexo-d-上传" class="headerlink" title="hexo d 上传"></a>hexo d 上传</h4><h4 id="repo：git地址"><a href="#repo：git地址" class="headerlink" title="repo：git地址"></a>repo：git地址</h4><h4 id="hexo-new-page-“文件名”"><a href="#hexo-new-page-“文件名”" class="headerlink" title="hexo new page “文件名”"></a>hexo new page “文件名”</h4><h4 id="hexo-new-“博客名”"><a href="#hexo-new-“博客名”" class="headerlink" title="hexo new “博客名”"></a>hexo new “博客名”</h4><p>shell命令</p>
<p>vi 文件名</p>
<p>ls -list</p>
<h6 id="markdown使用"><a href="#markdown使用" class="headerlink" title="markdown使用"></a>markdown使用</h6><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>标题1~6</td>
<td>ctrl1~6（清除是Ctrl+0（回到正文））</td>
</tr>
<tr>
<td>有序列表</td>
<td>Ctrl+shift+[</td>
</tr>
<tr>
<td>无序列表</td>
<td>ctrl+shift+]</td>
</tr>
<tr>
<td>表格</td>
<td>Ctrl+t</td>
</tr>
<tr>
<td>添加下一行表格</td>
<td>Ctrl+ente</td>
</tr>
<tr>
<td>代码块</td>
<td>Ctrl+shift+k</td>
</tr>
</tbody></table>
<p>nrm切换下载地址</p>
<ol>
<li>npm i nrm -g</li>
<li>查看可选项 nrm ls</li>
<li>改变下载来源  nrm use taobao</li>
</ol>
<p>webpack 初始化</p>
<ol>
<li><p>npm init -y</p>
</li>
<li><p>npm install webpack webpack-cli –save-dev</p>
</li>
<li><p>创建src文件夹,index.js,</p>
</li>
<li><pre><code class="js">///webpack.config.js
const path= require(&quot;path&quot;);
module.exports= &#123;
    mode:&#39;development&#39;,
    entry:path.join(__dirname,&#39;src&#39;,&#39;index.js&#39;),
    output:&#123;
        filename:&#39;bundle.js&#39;,
        path:path.resolve(__dirname,&quot;./dist&quot;),
    &#125;
&#125;
</code></pre>
</li>
<li><p>package.json里面的script中build:webpack</p>
</li>
<li><p>dist文件夹创建index.js,  引入bundle.js</p>
</li>
<li><p>npm run build(打包)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>原型</title>
    <url>/2022/04/03/%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<h6 id="class方法使用"><a href="#class方法使用" class="headerlink" title="class方法使用"></a>class方法使用</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Students</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">name, score</span>) &#123;</span><br><span class="line">                <span class="variable language_">super</span>(name)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">write</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">score</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h6 id="Object-create（x）"><a href="#Object-create（x）" class="headerlink" title="Object.create（x）"></a>Object.create（x）</h6><blockquote>
<p>创建一个新对象，使用现有对象x作为新创建对象的原型。</p>
</blockquote>
<h6 id="new-的过程"><a href="#new-的过程" class="headerlink" title="new 的过程"></a>new 的过程</h6><blockquote>
<p>在《JavaScript模式》这本书中，new的过程说的比较直白，当我们new一个构造器，主要有三步：</p>
<ul>
<li><p>创建一个空对象，将它的引用赋给 this，继承函数的原型。</p>
</li>
<li><p>通过 this 将属性和方法添加至这个对象</p>
</li>
<li><p>判断返回值类型是否是引用类型</p>
</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5构造函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Parent</span> = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">//1.创建一个新对象，赋予this，这一步是隐性的，</span></span><br><span class="line">    <span class="comment">// let this = &#123;&#125;;</span></span><br><span class="line">    <span class="comment">//2.给this指向的对象赋予构造属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="comment">//3.如果没有手动返回对象，则默认返回this指向的这个对象，也是隐性的</span></span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br></pre></td></tr></table></figure>

<h6 id="手写-空对象指向构造函数原型-this指向-返回值判断"><a href="#手写-空对象指向构造函数原型-this指向-返回值判断" class="headerlink" title="手写(空对象指向构造函数原型  this指向  返回值判断)"></a>手写(空对象指向构造函数原型  this指向  返回值判断)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myNew = <span class="keyword">function</span> (<span class="params">fn, ...rest</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//指定原型</span></span><br><span class="line">            <span class="keyword">let</span> result = fn.<span class="title function_">apply</span>(obj, rest)<span class="comment">//this</span></span><br><span class="line">            <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj<span class="comment">//判断传进来的函数有没有返回值</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h5><h6 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> obj =<span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    obj.<span class="property">name</span>=name</span><br><span class="line">    obj.<span class="property">age</span>=age</span><br><span class="line">    obj.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>,obj.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>,<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="构造函数加原型"><a href="#构造函数加原型" class="headerlink" title="构造函数加原型"></a>构造函数加原型</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="继承的模式"><a href="#继承的模式" class="headerlink" title="继承的模式"></a>继承的模式</h5><h6 id="原型链继承-子构造函数原型为父子实例"><a href="#原型链继承-子构造函数原型为父子实例" class="headerlink" title="原型链继承  (子构造函数原型为父子实例)"></a>原型链继承  (子构造函数原型为父子实例)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();        <span class="comment">//此处导致</span></span><br><span class="line">        <span class="keyword">let</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span></span><br><span class="line">        <span class="keyword">let</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span></span><br><span class="line">        <span class="keyword">let</span> res = child1.<span class="property">__proto__</span> == child2.<span class="property">__proto__</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//两个实例用的是同一个原型对象</span></span><br></pre></td></tr></table></figure>

<h6 id="构造函数继承-call方法-换属性"><a href="#构造函数继承-call方法-换属性" class="headerlink" title="构造函数继承   (call方法,换属性)"></a>构造函数继承   (call方法,换属性)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Parent1</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child);  <span class="comment">// 没问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getName</span>());  <span class="comment">// 会报错</span></span><br><span class="line"><span class="comment">//父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法</span></span><br></pre></td></tr></table></figure>

<h6 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Parent3</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent3&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title class_">Parent3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Child3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第二次调用 Parent3()</span></span><br><span class="line">    <span class="title class_">Parent3</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child3&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 第一次调用 Parent3()</span></span><br><span class="line">  <span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent3</span>();</span><br><span class="line">  <span class="comment">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class="line">  <span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child3</span>;</span><br><span class="line">  <span class="keyword">var</span> s3 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line">  <span class="keyword">var</span> s4 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line">  s3.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">play</span>, s4.<span class="property">play</span>);  <span class="comment">// 不互相影响</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br><span class="line"><span class="comment">///通过注释我们可以看到 Parent3 执行了两次，第一次是改变Child3 的 prototype 的时候，第二次是通过 call 方法调用 Parent3 的时候，那么 Parent3 多构造一次就多进行了一次性能开销</span></span><br></pre></td></tr></table></figure>

<h6 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> parent4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent4&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">let</span> person4 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent4);</span><br><span class="line">  person4.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">  person4.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> person5 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent4);</span><br><span class="line">  person5.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">name</span> === person4.<span class="title function_">getName</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">friends</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="property">friends</span>);</span><br><span class="line"><span class="comment">///那么关于这种继承方式的缺点也很明显，多个实例的引用类型属性指向相同的内存，存在篡改的可能，接下来我们看一下在这个继承基础上进行优化之后的另一种继承方式——寄生式继承。</span></span><br></pre></td></tr></table></figure>

<h6 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> parent5 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;parent5&quot;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original);</span><br><span class="line">  clone.<span class="property">getFriends</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> person5 = <span class="title function_">clone</span>(parent5);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="title function_">getFriends</span>());</span><br></pre></td></tr></table></figure>

<h6 id="寄生组合"><a href="#寄生组合" class="headerlink" title="寄生组合"></a>寄生组合</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span> (parent, child) &#123;</span><br><span class="line">  <span class="comment">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = child;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent6&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"> <span class="title class_">Parent6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent6</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = <span class="string">&#x27;child5&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">clone</span>(<span class="title class_">Parent6</span>, <span class="title class_">Child6</span>);</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Child6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFriends</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> person6 = <span class="keyword">new</span> <span class="title class_">Child6</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getFriends</span>());</span><br></pre></td></tr></table></figure>



<ol>
<li>原型链继承:简单的prototype&#x3D;实例</li>
<li>构造函数继承:借用方法</li>
<li>组合继承: 1+2(更改constructor)</li>
<li>原型式继承:儿子&#x3D; Object.create(fn.protorype</li>
<li>寄生式继承: 寄生函数,实例&#x3D;Object.create(父.prototype)</li>
<li>寄生组合式继承:5+3</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2022/04/25/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> length = arr.<span class="property">length</span></span><br><span class="line">            <span class="keyword">let</span> tem</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                        tem = arr[j]</span><br><span class="line">                        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">                        arr[j+<span class="number">1</span>] = tem</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> len=arr.<span class="property">length</span></span><br><span class="line">            <span class="keyword">let</span> tem,miniLength</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                miniLength=i</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;arr.<span class="property">length</span>;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[miniLength]&gt;arr[j])</span><br><span class="line">                    miniLength=j</span><br><span class="line">                &#125;</span><br><span class="line">                tem=arr[i]</span><br><span class="line">                arr[i]=arr[miniLength]</span><br><span class="line">                arr[miniLength]=tem</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tem</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                        tem=arr[j]</span><br><span class="line">                        arr[j]=arr[j-<span class="number">1</span>]</span><br><span class="line">                        arr[j-<span class="number">1</span>]=tem</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr.<span class="property">length</span>&lt;<span class="number">2</span>)<span class="keyword">return</span> arr</span><br><span class="line">            <span class="keyword">let</span> index=<span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span>/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">let</span> provide=arr.<span class="title function_">splice</span>(index,<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">// console.log(provide)</span></span><br><span class="line">            <span class="keyword">let</span> left=[]</span><br><span class="line">            <span class="keyword">let</span> right=[]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;provide)&#123;</span><br><span class="line">                    left.<span class="title function_">push</span>(i)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right.<span class="title function_">push</span>(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">sort</span>(left).<span class="title function_">concat</span>([provide], <span class="title function_">sort</span>(right));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span>, high = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((high - low) / <span class="number">2</span>) + low;</span><br><span class="line">        <span class="keyword">const</span> num = nums[mid];</span><br><span class="line">        <span class="keyword">if</span> (num === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; target) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>排序</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>扁平化</title>
    <url>/2022/04/06/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    <content><![CDATA[<h6 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自带方法</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">8</span>, [<span class="number">3</span>, <span class="number">0</span>, [<span class="number">4</span>, <span class="number">4</span>, <span class="number">7</span>, [<span class="number">5</span>, <span class="number">6</span>]]]]]</span><br><span class="line">        <span class="keyword">let</span> array = arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)<span class="comment">//维度-1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">array</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> arr = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> array) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(i)) &#123;</span><br><span class="line">                    <span class="comment">//arr = arr.concat(flatten(i))</span></span><br><span class="line">                    arr=[...arr,...<span class="title function_">flatten</span>(i)]</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr.<span class="title function_">push</span>(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//while</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenWhile</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(array.<span class="title function_">some</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)))&#123;</span><br><span class="line">                array=[].<span class="title function_">concat</span>(...array)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reduce</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenReduce</span>(<span class="params">array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res,next</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(next)?<span class="title function_">flatten</span>(next):next)</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///join,toString</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenJS</span>(<span class="params">array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>+item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flatMap</span></span><br><span class="line">array.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span>=&gt;</span>item)</span><br></pre></td></tr></table></figure>

<h6 id="对象扁平化"><a href="#对象扁平化" class="headerlink" title="对象扁平化"></a>对象扁平化</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">obj, newKey</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> isArr = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">let</span> cur = newKey ? (isArr ? <span class="string">`<span class="subst">$&#123;newKey&#125;</span>[<span class="subst">$&#123;key&#125;</span>]`</span> : <span class="string">`<span class="subst">$&#123;newKey&#125;</span>.<span class="subst">$&#123;key&#125;</span>`</span>) : <span class="string">`<span class="subst">$&#123;key&#125;</span>`</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isObj</span>(obj[key])) &#123;</span><br><span class="line">                <span class="title function_">dfs</span>(obj[key], cur)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newObj[cur] = obj[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfs</span>(obj, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//累加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curring</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> args = []<span class="comment">//最终参数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">_curring</span>(<span class="params">...rest</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rest.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">fn</span>(args)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    args=[...args,...rest]</span><br><span class="line">                    <span class="keyword">return</span> _curring</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h5><h6 id="typeof缺点"><a href="#typeof缺点" class="headerlink" title="typeof缺点"></a>typeof缺点</h6><p>不能检测出null, new Date(), array, regexp, </p>
<h6 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h6><p>对于基本数据类型,字面量创建出来的结果和实例创建的有一定区别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">2</span>) <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>在类的原型继承中，最后检测出来的结果未必准确</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn <span class="keyword">instanceof</span> <span class="title class_">Function</span>)<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn <span class="keyword">instanceof</span> <span class="title class_">Object</span>)<span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aa.<span class="property">constructor</span>===<span class="title class_">Array</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aa.<span class="property">constructor</span>===<span class="title class_">RegExp</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">1</span>).<span class="property">constructor</span>===<span class="title class_">Number</span>);<span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">constructor</span>===<span class="title class_">RegExp</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">constructor</span>===<span class="title class_">Object</span>);<span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p>null和undefined是无效的对象，因此不会有constructor存在，这两种类型的数据需要通过其它方式来判断。</p>
</li>
<li><p>函数的constructor是不稳定的，这个主要体现在可以把类的原型进行重写，这样检测出来的结果是不准确的。</p>
</li>
</ol>
<h6 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h6><p>instanceof</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instanceOf</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> left = a.<span class="property">__proto__</span></span><br><span class="line">            <span class="keyword">let</span> right = b.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (left === <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                left = left.<span class="property">__proto__</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>数组对象扁平化</tag>
        <tag>函数柯里化</tag>
        <tag>类型检测</tag>
      </tags>
  </entry>
  <entry>
    <title>数组操作</title>
    <url>/2022/04/02/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量方式:</span></span><br><span class="line"> <span class="comment">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span></span><br><span class="line"> <span class="keyword">var</span> a = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>];  <span class="comment">// [3,11,8];</span></span><br><span class="line"> <span class="comment">// 构造器:</span></span><br><span class="line"> <span class="comment">// 实际上 new Array === Array,加不加new 一点影响都没有。</span></span><br><span class="line"> <span class="keyword">var</span> a = <span class="title class_">Array</span>(); <span class="comment">// [] </span></span><br><span class="line"> <span class="keyword">var</span> a = <span class="title class_">Array</span>(<span class="number">3</span>); <span class="comment">// [,,] </span></span><br><span class="line"> <span class="keyword">var</span> a = <span class="title class_">Array</span>(<span class="number">3</span>,<span class="number">11</span>,<span class="number">8</span>); <span class="comment">// [ 3,11,8 ]</span></span><br></pre></td></tr></table></figure>

<h4 id="ES6-Array-of-返回由所有参数值组成的数组"><a href="#ES6-Array-of-返回由所有参数值组成的数组" class="headerlink" title="ES6 Array.of() 返回由所有参数值组成的数组"></a>ES6 Array.of() 返回由所有参数值组成的数组</h4><p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p>
<p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>); <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<p>ES6 Arrary.from() 将两类对象转为真正的数组</p>
<p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p>
<p>参数：<br>第一个参数(必需):要转化为真正数组的对象。<br>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。<br>第三个参数(可选):  ## 用来绑定this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1. 对象拥有length属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(obj); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;];</span></span><br><span class="line"><span class="comment">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList		对象</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>


<p>ES6: copyWithin() 指定位置的成员复制到其他位置</p>
<p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p>
<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">copyWithin</span>(target, start = <span class="number">0</span>, end = <span class="variable language_">this</span>.<span class="property">lengt</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6-fill-填充数组"><a href="#ES6-fill-填充数组" class="headerlink" title="ES6: fill() 填充数组"></a>ES6: fill() 填充数组</h3><p>定义: 使用给定值，填充一个数组。</p>
<p>参数:</p>
<p>第一个元素(必须): 要填充数组的值</p>
<p>第二个元素(可选): 填充的开始位置,默认值为0</p>
<p>第三个元素(可选)：填充的结束位置，默认是为this.length</p>
<p>MDN浏览器兼容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h6 id="不改变数组"><a href="#不改变数组" class="headerlink" title="不改变数组"></a>不改变数组</h6><p>  ES5：<br>    slice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、<br>    ES7：<br>    includes</p>
<p>关于forEach()你要知道：</p>
<p>无法中途退出循环，只能用return退出本次回调，进行下一次回调。<br>它总是返回 undefined值,即使你return了一个值。</p>
<h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><ol>
<li>set, {}无法去掉</li>
<li>嵌套for循环splice,NaN,{}</li>
<li>instanceof</li>
<li>sort</li>
<li>includes</li>
</ol>
<p>splice,slice,split,concat</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>数组操作</tag>
        <tag>数组去重</tag>
      </tags>
  </entry>
  <entry>
    <title>面试常见题目</title>
    <url>/2022/04/07/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%89%8B%E5%86%99/</url>
    <content><![CDATA[<h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myReduce</span> = <span class="keyword">function</span> (<span class="params">fn, initValue</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(fn) !== <span class="string">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入需为函数&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> arr = <span class="variable language_">this</span></span><br><span class="line">            <span class="keyword">let</span> initIndex, acc</span><br><span class="line">            initIndex = <span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">            acc = <span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span> ? arr[<span class="number">0</span>] : initValue</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = initIndex; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                acc = <span class="title function_">fn</span>(acc, arr[i], i, arr)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> acc</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h5 id="将数组转化为树"><a href="#将数组转化为树" class="headerlink" title="将数组转化为树"></a>将数组转化为树</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;标题1&#x27;</span>, <span class="attr">parent_id</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;标题2&#x27;</span>, <span class="attr">parent_id</span>: <span class="number">0</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;标题2-1&#x27;</span>, <span class="attr">parent_id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">&#x27;标题3-1&#x27;</span>, <span class="attr">parent_id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">&#x27;标题4-1&#x27;</span>, <span class="attr">parent_id</span>: <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">title</span>: <span class="string">&#x27;标题2-2&#x27;</span>, <span class="attr">parent_id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">list</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> result = []</span><br><span class="line">            <span class="keyword">const</span> map = list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">                pre[cur.<span class="property">id</span>] = cur</span><br><span class="line">                <span class="keyword">return</span> pre</span><br><span class="line">            &#125;, &#123;&#125;)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.<span class="property">parent_id</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>(item)</span><br><span class="line">                    <span class="comment">// continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (item.<span class="property">parent_id</span> <span class="keyword">in</span> map) &#123;</span><br><span class="line">                    <span class="keyword">const</span> parent = map[item.<span class="property">parent_id</span>]</span><br><span class="line">                    parent.<span class="property">children</span> = parent.<span class="property">children</span> || []</span><br><span class="line">                    parent.<span class="property">children</span>.<span class="title function_">push</span>(item)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">jsonToTree</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="comment">// 初始化结果数组，并判断输入数据的格式</span></span><br><span class="line">            <span class="keyword">let</span> result = []</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用map，将当前对象的id与当前对象对应存储起来</span></span><br><span class="line">            <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">            data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                map[item.<span class="property">id</span>] = item;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> parent = map[item.<span class="property">pid</span>];</span><br><span class="line">                <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">                    (parent.<span class="property">children</span> || (parent.<span class="property">children</span> = [])).<span class="title function_">push</span>(item);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="title function_">push</span>(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2022/04/20/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>常见时间复杂度:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shift,<span class="attr">unshift</span>:<span class="title function_">O</span>(n)</span><br><span class="line"><span class="comment">//数组是有序解构unshift操作非常慢</span></span><br></pre></td></tr></table></figure>


</blockquote>
<p>树的广度优先遍历(bfs)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bfs</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">const</span> queue=[root]</span><br><span class="line">    <span class="keyword">let</span> arr=[]</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> item=queue.<span class="title function_">shift</span>()</span><br><span class="line">        arr.<span class="title function_">push</span>(item)</span><br><span class="line">        <span class="keyword">if</span>(root.<span class="property">left</span>)queue.<span class="title function_">push</span>(root.<span class="property">left</span>)</span><br><span class="line">        <span class="keyword">if</span>(root.<span class="property">right</span>)queue.<span class="title function_">push</span>(root.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>树的先序遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">walkPreOrder</span>(<span class="params">root</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = [root]</span><br><span class="line">  <span class="keyword">while</span>(stack.<span class="property">length</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> item = stack.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 左边的子节点被推到右边的子节点之后，因为我们想先打印左边的子节点，所以它在栈中必须在右边的子节点之上。</span></span><br><span class="line">      <span class="keyword">if</span>(item.<span class="property">right</span>) stack.<span class="title function_">push</span>(item.<span class="property">right</span>)</span><br><span class="line">      <span class="keyword">if</span>(item.<span class="property">left</span>) stack.<span class="title function_">push</span>(item.<span class="property">left</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>中序遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">walkInOrder</span>(<span class="params">root</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> current = root</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(stack.<span class="property">length</span> || current)&#123;</span><br><span class="line">      <span class="keyword">while</span>(current)&#123;</span><br><span class="line">         stack.<span class="title function_">push</span>(current)</span><br><span class="line">         current = current.<span class="property">left</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> last = stack.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(last)</span><br><span class="line"></span><br><span class="line">      current = last.<span class="property">right</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="递归——分而治之算法-D-amp-C"><a href="#递归——分而治之算法-D-amp-C" class="headerlink" title="递归——分而治之算法(D&amp;C)"></a>递归——分而治之算法(D&amp;C)</h3><ol>
<li>递归求数组之和</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算数组的和</span></span><br><span class="line">        <span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr.<span class="property">length</span>===<span class="number">0</span>)<span class="keyword">return</span>  <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> item=arr.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="keyword">return</span> item+<span class="title function_">fn</span>(arr)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>快速排序</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr</span><br><span class="line">            <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">let</span> provide = arr.<span class="title function_">splice</span>(mid, <span class="number">1</span>)[<span class="number">0</span>]<span class="comment">//取出的是个数组</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(provide)</span><br><span class="line">            <span class="keyword">let</span> left = []</span><br><span class="line">            <span class="keyword">let</span> right = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; provide) &#123;</span><br><span class="line">                    left.<span class="title function_">push</span>(i)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right.<span class="title function_">push</span>(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([provide], <span class="title function_">quickSort</span>(right));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组arr</span></span><br><span class="line"><span class="comment">//path路径[1,2,3,4]==&gt;[1,2],[1,3],[1,4],...//n为4,k为2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backtracking</span>(<span class="params">n,k,startIndex</span>)&#123;<span class="comment">//n是题目数组的长度//k组合的大小</span></span><br><span class="line">    <span class="keyword">if</span>(path.<span class="property">length</span>===k)&#123;</span><br><span class="line">        res.<span class="title function_">push</span>([...path])<span class="comment">//拷贝一份</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=startIndex;i&lt;n,i++)&#123;</span><br><span class="line">            path.<span class="title function_">push</span>(nums[i])<span class="comment">//处理节点</span></span><br><span class="line">            <span class="title function_">backtracking</span>()<span class="comment">//递归</span></span><br><span class="line">            path.<span class="title function_">pop</span>()<span class="comment">//回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(n - (k - path.length) + 1)剪枝</span></span><br></pre></td></tr></table></figure>



<p>组合+剪枝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入：n = 4, k = 2</span></span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> combine = <span class="keyword">function</span>(<span class="params">n, k</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> res=[]</span><br><span class="line"><span class="keyword">let</span> path=[]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backtracking</span>(<span class="params">n,k,startIndex</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(path.<span class="property">length</span>===k)&#123;</span><br><span class="line">        res.<span class="title function_">push</span>([...path])</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i =startIndex;i&lt;=n - (k - path.<span class="property">length</span>) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">            path.<span class="title function_">push</span>(i)</span><br><span class="line">            <span class="title function_">backtracking</span>(n,k,i+<span class="number">1</span>)</span><br><span class="line">            path.<span class="title function_">pop</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">backtracking</span>(n,k,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>括号匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">str</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> s1 = <span class="string">&#x27;(&#123;[&#x27;</span></span><br><span class="line">            <span class="keyword">let</span> s2 = <span class="string">&#x27;)&#125;]&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!str.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">let</span> stack = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> str) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s1.<span class="title function_">includes</span>(i)) &#123;</span><br><span class="line">                    stack.<span class="title function_">push</span>(i)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s2.<span class="title function_">includes</span>(i)) &#123;</span><br><span class="line">                    <span class="keyword">const</span> top = stack[stack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_">match</span>(top, i)) &#123;</span><br><span class="line">                        stack.<span class="title function_">pop</span>()</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//辅助函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">match</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left === <span class="string">&#x27;(&#x27;</span> &amp;&amp; right === <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">if</span> (left === <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; right === <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">if</span> (left === <span class="string">&#x27;[&#x27;</span> &amp;&amp; right === <span class="string">&#x27;]&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据结构-栈"><a href="#数据结构-栈" class="headerlink" title="数据结构:栈"></a>数据结构:栈</h2><p>适用题目:括号匹配;基本计算器; </p>
<p>题目中的情形需要对于数组最后的两个元素进行运算;</p>
<p>进阶:单调栈:维护一个单调的数组:</p>
<p>题目适用于下一个最大,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stack=[]</span><br><span class="line"><span class="keyword">let</span> index=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>&amp;&amp;i&gt;||<span class="language-xml">&lt;stack[index-1])&#123;</span></span><br><span class="line"><span class="language-xml">        stack.pop()</span></span><br><span class="line"><span class="language-xml">        //</span></span><br><span class="line"><span class="language-xml">        index--</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    stack.push(i)</span></span><br><span class="line"><span class="language-xml">    index++</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">//时间复杂度:每个元素只会被push一次,最多pop一次故o(n)</span></span><br></pre></td></tr></table></figure>

<h2 id="数据结构-数组-链表"><a href="#数据结构-数组-链表" class="headerlink" title="数据结构:数组,链表"></a>数据结构:数组,链表</h2><ol>
<li>前缀和数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> preSum=<span class="keyword">new</span> <span class="title class_">Array</span>(arr.<span class="property">length</span>+<span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    preSum[i+<span class="number">1</span>]=preSum[i]+arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//preSum数组即是arr的前缀和,相减即可得到数据</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>双指针链表</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fast=head</span><br><span class="line"><span class="keyword">let</span> slow=head</span><br><span class="line"><span class="comment">//慢指针走了快指针的一半</span></span><br><span class="line"><span class="keyword">while</span>(fast&amp;&amp;fast.<span class="property">next</span>)</span><br><span class="line">    fast=fast.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">	slow=slow.<span class="property">next</span></span><br><span class="line">	<span class="keyword">if</span>(fast===slow)&#123;</span><br><span class="line">        <span class="comment">//逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>滑动窗口</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>















































































































































































































]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机基础</title>
    <url>/2022/04/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h6 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h6><p>http0.9: 文本内容,事务,结束时就释放这个链接,get请求</p>
<p>http1.0: 超文本内容,支持缓存,多种方式(只能发送一个请求,就会断)</p>
<p>http1.1: 持久连接,可以主动关闭Connection:(keep-alive和closer)管道机制:发送多个请求</p>
<p>http2.0:头部压缩（合并同时发出请求的相同部分）</p>
<p>(队头堵塞)</p>
<h6 id="当我们在浏览器输入地址-会发生什么"><a href="#当我们在浏览器输入地址-会发生什么" class="headerlink" title="当我们在浏览器输入地址,会发生什么"></a>当我们在浏览器输入地址,会发生什么</h6><ol>
<li>DNS域名URL解析解析为IP地址(DNS服务器)(缓存)</li>
<li>根据IP找服务器,TCP三次握手(建立连接通道)</li>
<li>TCP连接发http请求(tcp在底层)</li>
<li>服务器响应,浏览器获得HTML代码</li>
<li>浏览器解析代码获得资源(js,css,图片资源)</li>
<li>浏览器渲染页面</li>
<li>服务器关闭tcp连接</li>
</ol>
<h4 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h4><p>强制缓存:服务器确定文件需要缓存的时候会在响应头设置Cache-Control,(no-cache)并且设置max-age:(秒),,,,,expires有一个问题：客户端的时间是可以修改的，浏览器跟随系统时间，所以会有影响，cache-control用来解决该问题</p>
<ul>
<li>public    可以被任何对象缓存(客户端,,代理服务器)</li>
<li>private   只能被客户端缓存</li>
<li>no-cache   需要确认一下是否发生变化</li>
<li>no-store   禁止缓存</li>
<li>max-age  设置最大缓存时间</li>
<li>s-maxage   仅适用于共享缓存优先级高</li>
</ul>
<p>协商缓存: 服务端缓存策略  第一次服务器发送资源和资源标识,,后续客服端发送请求时带有资源标识,如果是最新的,服务器返回状态码<strong>304</strong>,客户端从本地拿资源,若为200,则是从新发资源:::::::</p>
<p>资源标识::last-modified:资源上一次修改时间;ETAG:资源对应唯一标识(优先,因为前者时间精确秒级,容易重复,后者是唯一字符串)</p>
<h4 id="三次握手四次挥手-全双工"><a href="#三次握手四次挥手-全双工" class="headerlink" title="三次握手四次挥手(全双工)"></a>三次握手四次挥手(全双工)</h4><p>ACK: 确认收到请求</p>
<p>SYN:建立联机(标志位)</p>
<p>FIN:关闭连接</p>
<p>ack:确认序号&#x2F;&#x2F;发送收到对方数据</p>
<p>seq:序号&#x2F;发送自己数据&#x2F;&#x2F;初始化序列号</p>
<h5 id="三次握手-establish"><a href="#三次握手-establish" class="headerlink" title="三次握手:(establish)"></a>三次握手:(establish)</h5><ol>
<li>SYN&#x3D;1建立联机,seq&#x3D;x</li>
<li>SYN&#x3D;1建立联机,seq&#x3D;y,ACK&#x3D;1确认,ack&#x3D;seq+1</li>
<li>ACK&#x3D;1确认收到ack&#x3D;y+1</li>
</ol>
<p>第一次握手：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。<br>第二次握手：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。<br>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</p>
<h5 id="四次挥手-等于说服务端将ACK和FIN的发送合并为一次挥手，如果客户端请求关闭连接时，服务器并没有数据需要发送，其实三次挥手应该也是可以的。但一般情况下，客户端猝不及防地请求断开连接，服务器还是有数据需要传输的，所以四次挥手更加地稳妥。。-不断的进行数据包重发-全双工都要关闭"><a href="#四次挥手-等于说服务端将ACK和FIN的发送合并为一次挥手，如果客户端请求关闭连接时，服务器并没有数据需要发送，其实三次挥手应该也是可以的。但一般情况下，客户端猝不及防地请求断开连接，服务器还是有数据需要传输的，所以四次挥手更加地稳妥。。-不断的进行数据包重发-全双工都要关闭" class="headerlink" title="四次挥手(等于说服务端将ACK和FIN的发送合并为一次挥手，如果客户端请求关闭连接时，服务器并没有数据需要发送，其实三次挥手应该也是可以的。但一般情况下，客户端猝不及防地请求断开连接，服务器还是有数据需要传输的，所以四次挥手更加地稳妥。。 不断的进行数据包重发)(全双工都要关闭)"></a>四次挥手(等于说服务端将ACK和FIN的发送合并为一次挥手，如果客户端请求关闭连接时，服务器并没有数据需要发送，其实三次挥手应该也是可以的。但一般情况下，客户端猝不及防地请求断开连接，服务器还是有数据需要传输的，所以四次挥手更加地稳妥。。 不断的进行数据包重发)(全双工都要关闭)</h5><ol>
<li>FIN&#x3D;1,断开连接,seq&#x3D;m(增长上来的)</li>
<li>ACK&#x3D;1,确认ack&#x3D;m+1</li>
<li>FIN&#x3D;1,再次确认断开seq&#x3D;n</li>
<li>ACK&#x3D;1,ack&#x3D;n+1</li>
</ol>
<h4 id="cookie-session-token-jwt"><a href="#cookie-session-token-jwt" class="headerlink" title="cookie,session,token,jwt"></a>cookie,session,token,jwt</h4><p>这些东西产生的原因是http是无状态的协议,需要cookie和session,</p>
<h6 id="cookie-浏览器数据储存功能-跨域-必须将请求对象的withcredentials属性设置为true"><a href="#cookie-浏览器数据储存功能-跨域-必须将请求对象的withcredentials属性设置为true" class="headerlink" title="cookie(浏览器数据储存功能)     跨域:必须将请求对象的withcredentials属性设置为true"></a>cookie(浏览器数据储存功能)     跨域:必须将请求对象的withcredentials属性设置为true</h6><ol>
<li>cookie存储在客户端本地,服务端发来的,下次再发送请求携带</li>
<li>不可跨域,绑定在单一域名别的域名不能用</li>
</ol>
<p>cookie的特性:键值对,domain(指定域名),path(哪个路由产生的)maxage&#x2F;expires失效时间</p>
<h6 id="session-会话"><a href="#session-会话" class="headerlink" title="session(会话)"></a>session(会话)</h6><ol>
<li>基于cookie实现</li>
<li>存储在服务端,sessionid存储在客户端cookie中</li>
</ol>
<p>区别:</p>
<ol>
<li>session安全,存储位置导致</li>
<li>值类型不同,cookie只支持字符串,session任意数据类型</li>
<li>有效期cookie长时间保存,session在超时或者服务器关闭</li>
<li>cookie存储的数据不能超过4k,session高但是会占用资源</li>
</ol>
<h6 id="token-令牌"><a href="#token-令牌" class="headerlink" title="token(令牌)"></a>token(令牌)</h6><p>组成:uid(身份标识),time(当前时间戳),sign(签名哈希算法组成的字符串)</p>
<p>特点:服务端无状态变化,可扩展.支持移动设备,安全,跨程序</p>
<p>发送请求时把token带在请求头里,  Accesstoken  refreshtoken(时间长前者过期用这个再次请求得到token)</p>
<h5 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h5><p>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt</p>
<p>请求方式:一般是在请求头里加入Authorization，并加上Bearer标注</p>
<h4 id="base64加密"><a href="#base64加密" class="headerlink" title="base64加密:"></a>base64加密:</h4><ol>
<li>找原数据ascll码对应二进制数字</li>
<li>重新分割,找十进制数字(位置不够补上等于号)</li>
<li>找base64编码表</li>
</ol>
<p>计算机中任何数据都是按ascii码存储的，而ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，比如说从A地传到B地，往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个Base64编码，统统变成可见字符，这样出错的可能性就大降低了</p>
<h4 id="xss跨站攻击-浏览器中执行恶意脚本-拿到用户信息"><a href="#xss跨站攻击-浏览器中执行恶意脚本-拿到用户信息" class="headerlink" title="xss跨站攻击: 浏览器中执行恶意脚本,拿到用户信息"></a>xss跨站攻击: 浏览器中执行恶意脚本,拿到用户信息</h4><ol>
<li>盗取cookie,监听用户行为,(输入账号密码发到黑客服务器)</li>
<li>修改dom伪造登录表单</li>
<li>悬浮广告</li>
</ol>
<ul>
<li>储存型:  存到数据库(评论系统如vue中的v-html)客户端再次执行</li>
<li>反射型: 把脚本作为网络请求一部分(作为地址的一部分参数,服务器再返回回来,浏览器执行(反射到HTML中))</li>
<li>文档型:</li>
</ul>
<p> 对用户输入进行转码   httpOnly:cookie不能获取</p>
<h4 id="csrf-跨站请求伪造-引诱用户点击-用用户身份攻击网站"><a href="#csrf-跨站请求伪造-引诱用户点击-用用户身份攻击网站" class="headerlink" title="csrf   跨站请求伪造  (引诱用户点击,用用户身份攻击网站)"></a>csrf   跨站请求伪造  (引诱用户点击,用用户身份攻击网站)</h4><ol>
<li>自动发GET请求 请求时带上自己的cookie进入网站回款</li>
<li>自动发post (造个表单伪造成用户在登录,操作)</li>
<li>(黑客的网站上挂一个get请求让后获得信息)<ul>
<li>验证来源站点   请求头中的orgin(包含域名)和referer(包含URL)</li>
</ul>
</li>
</ol>
<h4 id="https-对称加密-加密解密的密钥相同-非对称加密-服务器发送公钥-自己留公钥-公钥加密私钥解-私钥无法加密"><a href="#https-对称加密-加密解密的密钥相同-非对称加密-服务器发送公钥-自己留公钥-公钥加密私钥解-私钥无法加密" class="headerlink" title="https 对称加密(加密解密的密钥相同) 非对称加密(服务器发送公钥,自己留公钥[公钥加密私钥解,私钥无法加密])"></a>https 对称加密(加密解密的密钥相同) 非对称加密(服务器发送公钥,自己留公钥[公钥加密私钥解,私钥无法加密])</h4><h6 id="过程"><a href="#过程" class="headerlink" title="过程:"></a>过程:</h6><p>对称加密(全拿到)</p>
<ol>
<li>浏览器给服务器发送随机数(client_random)和加密列表</li>
<li>服务器给浏览器发送随机数(Server_random)和加密方法</li>
<li>现在将加密方法和随机数结合然后生成密钥</li>
</ol>
<p>非对称加密(拿到公钥)</p>
<ol>
<li>浏览器发送随机数(client_random)和加密列表</li>
<li>服务器发送随机数(server_random)和加密方法和公钥</li>
<li>浏览器将两个随机数和公钥结合生成安好</li>
</ol>
<h6 id="结合-用公钥加密随机数"><a href="#结合-用公钥加密随机数" class="headerlink" title="结合(用公钥加密随机数)"></a>结合(用公钥加密随机数)</h6><ol>
<li>浏览器发送随机数(client_random)和加密方法列表</li>
<li>服务器发送随机数(server_random)和加密方法和公钥</li>
<li>浏览器发送随机数(pre_random)<em><strong>用公钥加密</strong></em></li>
<li>服务器用私钥解密pre_random,两者用三个随机数和相同的方法得到密钥</li>
</ol>
<p>get和post区别</p>
<p>本质是一样的,都是TCP链接</p>
<table>
<thead>
<tr>
<th></th>
<th>get</th>
<th>post</th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>放在URL上(也可以放在请求体上)[[[浏览器的限制]]](((可以收藏网页)))</td>
<td>放在请求体上(也可以放在参数上)</td>
</tr>
<tr>
<td>安全</td>
<td>较为不安全</td>
<td>较为安全</td>
</tr>
<tr>
<td>发送包</td>
<td>一次</td>
<td>两次(先发送请求头,返回100continue)再发送请求体(火狐一个)</td>
</tr>
<tr>
<td>编码方法</td>
<td>contenttype   application&#x2F;x-www-form-urlencoded</td>
<td>比较多(发送更多数据类型)</td>
</tr>
<tr>
<td>后退刷新</td>
<td>无害</td>
<td>重新</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="DNS域名解析"><a href="#DNS域名解析" class="headerlink" title="DNS域名解析"></a>DNS域名解析</h4><p>DNS解析</p>
<p>电脑输入域名,访问dns域名服务器获得IP地址</p>
<p>dns劫持: 访问dns服务器的时候被掉包(钓鱼网站)</p>
<p>步骤: (解析器客服端——&gt;<strong>本地域名服务器</strong>)</p>
<ol>
<li>根域名服务器—–返回.com</li>
<li>顶级域名服务器—–返回baidu.com</li>
<li>二级域名服务器—–返回<a href="http://www.baidu.com/">www.baidu.com</a></li>
</ol>
<p>递归DNS服务器: 自己服务器上查不到,本地域名服务器(本地区的域名服务器,,,,设备IP地址的运营商的服务器)就会代替查找,他就是递归服务器</p>
<p>权威服务器: 比较有权威的服务器</p>
<p>(根域名服务器—-&gt;顶级域名服务器—-&gt;权威域名服务器)</p>
<h5 id="浏览器解析css-css不会阻塞解析，会阻塞渲染-放在body底部，在DOM-Tree构建完成之后开始构建render-Tree，计算布局然后绘制网页，等css文件加载后，开始构建CSSOM-Tree，并和DOM-Tree一起构建render-Tree，再次计算布局重新绘制"><a href="#浏览器解析css-css不会阻塞解析，会阻塞渲染-放在body底部，在DOM-Tree构建完成之后开始构建render-Tree，计算布局然后绘制网页，等css文件加载后，开始构建CSSOM-Tree，并和DOM-Tree一起构建render-Tree，再次计算布局重新绘制" class="headerlink" title="浏览器解析css  (css不会阻塞解析，会阻塞渲染)    放在body底部，在DOM Tree构建完成之后开始构建render Tree，计算布局然后绘制网页，等css文件加载后，开始构建CSSOM Tree，并和DOM Tree一起构建render Tree，再次计算布局重新绘制"></a>浏览器解析css  (css不会阻塞解析，会阻塞渲染)    放在body底部，在DOM Tree构建完成之后开始构建render Tree，计算布局然后绘制网页，等css文件加载后，开始构建CSSOM Tree，并和DOM Tree一起构建render Tree，再次计算布局重新绘制</h5><p>默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。<br>JavaScript 不仅可以读取和修改 DOM 属性，还可以读取和修改 CSSOM 属性。<br>存在阻塞的 CSS 资源时，浏览器会延迟 JavaScript 的执行和 DOM 构建。另外：</p>
<p>当浏览器遇到一个 script 标记时，DOM 构建将暂停，直至脚本完成执行。<br>JavaScript 可以查询和修改 DOM 与 CSSOM。<br>CSSOM 构建时，JavaScript 执行将暂停，直至 CSSOM 就绪。<br>所以，script 标签的位置很重要。实际使用时，可以遵循下面两个原则：</p>
<p>CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。<br>JavaScript 应尽量少影响 DOM 的构建。</p>
<p>CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。<br>而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</p>
<p>osi模型</p>
<p>物理层: 将数据转换为可通过物理介质传送的电子信号 相当于邮局中的搬运工人。<br>数据链路层: 决定访问网络介质的方式。在此层将数据分帧，并处理流控制。本层指定拓扑结构并提供硬件寻址，相当于邮局中的装拆箱工人。<br>网络层: 使用权数据路由经过大型网络 相当于邮局中的排序工人。<br>传输层: 提供终端到终端的可靠连接 相当于公司中跑邮局的送信职员。<br>会话层: 允许用户使用简单易记的名称建立连接 相当于公司中收寄信、写信封与拆信封的秘书。<br>表示层: 协商数据交换格式 相当公司中简报老板、替老板写信的助理。<br>应用层: 用户的应用程序和网络之间的接口。<br>历史</p>
<p><a href="https://www.jianshu.com/p/9b9438dff7a2">模型图解</a></p>
<h6 id="浏览器进程线程"><a href="#浏览器进程线程" class="headerlink" title="浏览器进程线程"></a>浏览器进程线程</h6><p>进程:  车间  火车</p>
<p>线程:  工人  车厢</p>
<p>http状态码:</p>
<p>1xx代表接受正在处理</p>
<p>200:  成功</p>
<p>204: 没有内容</p>
<p>206:  只有一部分</p>
<p>301:  Moved Permanently   URL更新(永久重定向)</p>
<p>302:  URL临时移动;</p>
<p>400:  客户端请求的语法错误，服务器无法理解\</p>
<p>403:   服务器理解请求客户端的请求，但是拒绝执行此请求</p>
<p>500 - 内部服务器错误</p>
<h4 id="cdn-内容分发网络-就是根据用户位置分配最近的资源-边缘节点-中央节点-源站点"><a href="#cdn-内容分发网络-就是根据用户位置分配最近的资源-边缘节点-中央节点-源站点" class="headerlink" title="cdn: 内容分发网络      就是根据用户位置分配最近的资源(边缘节点,中央节点,源站点)"></a>cdn: 内容分发网络      就是根据用户位置分配最近的资源(边缘节点,中央节点,源站点)</h4><p>分发内容: </p>
<p>静态内容:不容易改变的,B站点赞图标 (通过源服务器发送的请求头部cache-control知道保存东西)(pull,push)</p>
<p>动态内容: 容易改变的,点赞数量</p>
<p>将链接开通cdn后—-(给域名解析的后台添加专用解析记录)—–&gt;dns得到的是指向处理cdn的dns服务器—–&gt;cdn负载均衡服务器(找近的服务器的IP地址)—-&gt;链接最近的服务器</p>
<p>cdn挂了:</p>
<p>在下面加一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="property">Vue</span>|| <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script src=&quot;xxxxxx.js&quot;&gt;&lt;\/script&gt;&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p>操作系统: </p>
<p>并发: 一个应用程序中同时存在多个任务执行,同时刻看起来像一起执行,系统只有一个CPU,根本不可能同时运行一个以上的线程,他只能把CPU运行时间划分为多个时间段,再将时间段分发,一个时间线程代码运行,其他处于挂起状态</p>
<p>并行;  系统有多个CPU,可以同时处理多个线程;</p>
<p>进程是工厂     线程是工人</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2022/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h6 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个类一个属性三个方法</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Observe</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">message</span> = &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定</span></span><br><span class="line">            $on(type, fn) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">message</span>[type]) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">message</span>[type] = []</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">includes</span>(fn)) <span class="keyword">return</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">push</span>(fn)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解除</span></span><br><span class="line">            $off(type, fn) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">message</span> = &#123;&#125;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">                    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">message</span>[type]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">message</span>[type] = <span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item !== fn)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 触发</span></span><br><span class="line">            $emit(type) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">message</span>[type]) <span class="keyword">return</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">message</span>[type].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">item</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h6 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lilei&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> !instance ? instance = <span class="keyword">new</span> <span class="title class_">Person</span> : instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Axios</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">make</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Axios</span>.<span class="property">instance</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title class_">Axios</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Axios</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Axios</span>.<span class="property">instance</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>网站弹出广告是固定的</li>
<li>每次弹出的都是设计好的</li>
</ul>
<h6 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察者:身份+技能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, fn = () =&gt; &#123; &#125;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fn</span> = fn</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=state<span class="comment">//状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>=[]<span class="comment">//观察者列表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setState</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">state</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addObservers</span>(<span class="params">obs</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">includes</span>(obs))<span class="keyword">return</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(obs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span>(<span class="params"> beforefn </span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> __self = <span class="variable language_">this</span>; <span class="comment">// 保存原函数的引用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 返回包含了原函数和新函数的&quot;代理&quot;函数</span></span><br><span class="line">    beforefn.<span class="title function_">apply</span>( <span class="variable language_">this</span>, <span class="variable language_">arguments</span> ); <span class="comment">// 执行新函数，且保证 this 不被劫持，新函数接受的参数</span></span><br><span class="line">    <span class="comment">// 也会被原封不动地传入原函数，新函数在原函数之前执行</span></span><br><span class="line">    <span class="keyword">return</span> __self.<span class="title function_">apply</span>( <span class="variable language_">this</span>, <span class="variable language_">arguments</span> ); <span class="comment">// 执行原函数并返回原函数的执行结果，</span></span><br><span class="line">    <span class="comment">// 并且保证 this 不被劫持</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span>(<span class="params"> afterfn </span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> __self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = __self.<span class="title function_">apply</span>( <span class="variable language_">this</span>, <span class="variable language_">arguments</span> );</span><br><span class="line">    afterfn.<span class="title function_">apply</span>( <span class="variable language_">this</span>, <span class="variable language_">arguments</span> );</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>













<ol>
<li>系统的分析</li>
</ol>
<ul>
<li>系统开发背景:教务系统登录方式繁琐……</li>
<li>可行性分析:系统可行性,学生方面,教师方面</li>
</ul>
<ol start="2">
<li>系统主要功能</li>
</ol>
<ul>
<li>教师:身份的注册,登录,学生成绩的增删改查</li>
<li>学生:身份的注册,登录,成绩的查询</li>
</ul>
<ol start="3">
<li>涉及技术:看b站视频找一下</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>发布订阅模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2022/04/09/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h6 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h6><ol>
<li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</li>
<li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</li>
<li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</li>
<li>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myIteration</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> index&lt;arr.<span class="property">length</span>?</span><br><span class="line">                    &#123;<span class="attr">value</span>:arr[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125;:</span><br><span class="line">                    &#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;name:lilei&#x27;</span>, <span class="string">&#x27;age:18&#x27;</span>, <span class="string">&#x27;sex:男&#x27;</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> index&lt;self.<span class="property">data</span>.<span class="property">length</span>?</span><br><span class="line">                        &#123;<span class="attr">value</span>:self.<span class="property">data</span>[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125;:</span><br><span class="line">                        &#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    <span class="comment">//&quot;name:lilei&quot; &quot;age:18&quot; &quot;sex:男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///生成器函数</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]=<span class="keyword">function</span>*()&#123;</span><br><span class="line">            <span class="keyword">let</span> arr=<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">this</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i  <span class="keyword">of</span> obj)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">diff</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="title function_">diff</span>(obj)</span><br><span class="line">            <span class="keyword">if</span> (res === <span class="string">&#x27;[object RegExp]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">            <span class="keyword">if</span> (res === <span class="string">&#x27;[object Array]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(obj)</span><br><span class="line">            <span class="keyword">if</span> (res === <span class="string">&#x27;[object Date]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">            <span class="keyword">if</span> (res === <span class="string">&#x27;[object Function]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(obj)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">                        newObj[key] = obj[key]</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        newObj[key] = <span class="title function_">deepClone</span>(obj[key])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newObj</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj === <span class="literal">null</span>) <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">const</span> objFromMap = map.<span class="title function_">get</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (objFromMap) <span class="keyword">return</span> objFromMap</span><br><span class="line">    <span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line">    map.<span class="title function_">set</span>(obj, target)</span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Map</span>) &#123;</span><br><span class="line">        target = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">        obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> v1 = <span class="title function_">cloneDeep</span>(v, map)</span><br><span class="line">            <span class="keyword">const</span> k1 = <span class="title function_">cloneDeep</span>(k, map)</span><br><span class="line">            target.<span class="title function_">set</span>(k1, v1)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Set</span>) &#123;</span><br><span class="line">        target = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">        obj.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> v1 = <span class="title function_">cloneDeep</span>(v, map)</span><br><span class="line">            target.<span class="title function_">add</span>(v1)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//array</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        target = obj.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">cloneDeep</span>(item, map)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//obj</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> val = obj[key]</span><br><span class="line">        target[key] = val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试</category>
        <category>手写</category>
      </categories>
      <tags>
        <tag>迭代器</tag>
        <tag>深克隆</tag>
      </tags>
  </entry>
  <entry>
    <title>难题</title>
    <url>/2022/04/04/%E9%9A%BE%E9%A2%98/</url>
    <content><![CDATA[<h6 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo=&#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line">        (<span class="keyword">function</span>(<span class="params">foo</span>)&#123;</span><br><span class="line">        		<span class="comment">//var foo//不会起作用</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">n</span>);</span><br><span class="line">                foo.<span class="property">n</span>=<span class="number">3</span><span class="comment">//不经改变内部同时改变外部</span></span><br><span class="line">                <span class="keyword">var</span> foo=&#123;<span class="attr">n</span>:<span class="number">2</span>&#125;<span class="comment">//将内部的发生改变,开辟新地址</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">n</span>);</span><br><span class="line">            &#125;)(foo)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">n</span>);</span><br><span class="line">        <span class="comment">///1, 2, 3</span></span><br></pre></td></tr></table></figure>

<p>函数传入参数其实是将外部的参数赋值内部若是引用类型则公用地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 success&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 end&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;srcipt start&#x27;</span>)</span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;srcipt end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">////</span></span><br><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line"><span class="comment">/////在async1中await后面的Promise是没有返回值的，也就是它的状态始终是pending状态，所以在await之后的内容是不会执行的，包括async1后面的 .then</span></span><br></pre></td></tr></table></figure>



<p><strong>对象没有作用域</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="title function_">f1</span> = (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1111&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">f1</span>();</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">pro</span>: &#123;</span><br><span class="line">     <span class="attr">getPro</span>:<span class="function">() =&gt;</span>  &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = obj.<span class="property">say</span>;</span><br><span class="line"><span class="title function_">o</span>();</span><br><span class="line">obj.<span class="title function_">say</span>();</span><br><span class="line">obj.<span class="property">pro</span>.<span class="title function_">getPro</span>();</span><br><span class="line"><span class="comment">///////</span></span><br><span class="line"><span class="number">1111</span> <span class="variable language_">window</span>对象</span><br><span class="line"><span class="number">1111</span> obj对象</span><br><span class="line"><span class="variable language_">window</span>对象</span><br><span class="line"><span class="comment">/////////</span></span><br><span class="line"><span class="title function_">o</span>()，o是在全局执行的，而f1是箭头函数，它是没有绑定<span class="variable language_">this</span>的，它的<span class="variable language_">this</span>指向其父级的<span class="variable language_">this</span>，其父级say方法的<span class="variable language_">this</span>指向的是全局作用域，所以会打印出<span class="variable language_">window</span>；</span><br><span class="line">obj.<span class="title function_">say</span>()，谁调用say，say 的<span class="variable language_">this</span>就指向谁，所以此时<span class="variable language_">this</span>指向的是obj对象；</span><br><span class="line">obj.<span class="property">pro</span>.<span class="title function_">getPro</span>()，我们知道，箭头函数时不绑定<span class="variable language_">this</span>的，getPro处于pro中，而对象不构成单独的作用域，所以箭头的函数的<span class="variable language_">this</span>就指向了全局作用域<span class="variable language_">window</span>。</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">number</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            <span class="attr">number</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">db1</span>: (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//早就执行了//对象没有作用域</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">number</span> *= <span class="number">4</span>;</span><br><span class="line">                <span class="comment">// console.log(this.number)//8,</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//全局调用</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">number</span> *= <span class="number">5</span>;<span class="comment">//全局乘5</span></span><br><span class="line">                    <span class="comment">// console.log(this.number)//5*8</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> db1 = obj.<span class="property">db1</span>;</span><br><span class="line">        <span class="title function_">db1</span>();</span><br><span class="line">        obj.<span class="title function_">db1</span>();<span class="comment">//obj//3*5</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">number</span>);     <span class="comment">// 15</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">number</span>);<span class="comment">//40</span></span><br></pre></td></tr></table></figure>



<p>变量提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> friendName = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> friendName === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> friendName = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye &#x27;</span> + friendName);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + friendName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//////</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;World!&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye &#x27;</span> + name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>面试</title>
    <url>/2022/04/19/%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>字节(一面):</p>
<ol>
<li>问学习多久了,学习方式</li>
<li>css:</li>
</ol>
<ul>
<li>画三角形,画各种三角形,原理</li>
<li>设计一个div,长是宽的二倍,用padding的什么单位</li>
<li>flex的属性有个奇奇挂怪的属性</li>
</ul>
<ol start="3">
<li>es6,箭头函数,拓展运算符,看代码输出(事件循环)</li>
<li>手写promise.all</li>
<li>生成器函数,讲讲</li>
<li>构造树:  数组里面有对象节点(有id;name,parent_id)</li>
<li>层序遍历树: 多种方法递归时间复杂度</li>
<li>构造一个函数(12345.6转化为12,345.60)</li>
<li>输入url到界面:</li>
</ol>
<ul>
<li>dns解析细节(哪里递归哪里迭代)</li>
<li>tcp细节(为什么不是两次)<br>*渲染细节(js文件怎么确定渲染树构建完成了,(defer,async))</li>
<li>跨域细节(cors,jsonp,….)<br>*四次挥手(为什么是四次,有时候可以三次吗)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.<span class="property">src</span>=<span class="string">`<span class="subst">$&#123;url&#125;</span>`</span>?callback=<span class="string">`<span class="subst">$&#123;&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">res.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>





<p>格灵深瞳:</p>
<p>浏览器(一百条数据)浏览器是同时还是依次(队头阻塞)</p>
<p>手写Objec.create</p>
<p>手写 <em>proto</em>_(a.constructor.prototype)</p>
<p>手写new</p>
<p>class语法对于箭头函数和普通函数原理</p>
<p>map数据类型的方法</p>
<p>vue的响应式原理收集依赖</p>
<p>美团一面</p>
<ol>
<li>项目</li>
<li>登录验证密码框</li>
<li>tokencookie</li>
<li>跨域jsonp操作</li>
<li>类型判断</li>
<li>instanceof手写</li>
<li>对象循环引用手写</li>
<li>promiseall手写</li>
<li>事件循环和this指向问题</li>
<li>快排</li>
<li>tcpudp区别</li>
<li>osi模型&#x2F;&#x2F;&#x2F;&#x2F;</li>
<li>flex布局三栏布局</li>
</ol>
<p>美团二面:</p>
<ol>
<li>项目</li>
<li>this指向题目判断</li>
<li>输入URL到界面过程</li>
<li>写一个函数返还被调用次数:   fn()返回1,fn()返回2,fn()返回3</li>
<li>浏览器渲染界面过程</li>
<li>微信红包拼手气算法</li>
</ol>
<p>拼多多一面</p>
<ol>
<li>项目</li>
<li>浏览器渲染</li>
<li>vue响应式原理</li>
<li>算法大数相加</li>
<li>算法最长不重复子串</li>
</ol>
<p>达智能一面</p>
<ol>
<li>盒子模型</li>
<li>闭包作用</li>
<li>vue响应式原理</li>
<li>修改vuex的数据</li>
<li>vue全局组件和局部组件</li>
<li>性能优化</li>
<li>原型链与继承</li>
</ol>
<p>字节教育业务一面</p>
<ol>
<li>登录流程</li>
<li>xss和crsf</li>
<li>dns劫持</li>
<li>promise.all控制最大并发</li>
<li>算法:最大和连续数组</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>项目</title>
    <url>/2022/04/13/%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h5 id="项目遇到的困难及解决方案"><a href="#项目遇到的困难及解决方案" class="headerlink" title="项目遇到的困难及解决方案"></a>项目遇到的困难及解决方案</h5><ol>
<li>Vue路由重复点击时会出现报错 Uncaught (in <a href="https://so.csdn.net/so/search?q=promise&spm=1001.2101.3001.7020">promise</a>) NavigationDuplicated: Avoided redundant navigation to current location:XXX， ,因为push返回的是一个promise对象,但是push没传递参数,(编程式导航的问题)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">location</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//push</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VueRouterPush</span> = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span> (to) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">VueRouterPush</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, to).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//replace</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VueRouterReplace</span> = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span> = <span class="keyword">function</span> <span class="title function_">replace</span> (to) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">VueRouterReplace</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, to).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>事件委托             删除多个商品promise.all&#x2F;&#x2F;             路由懒加载</p>
<p>业务:</p>
<p>面包屑导航操作,</p>
<blockquote>
<p>query参数三级id,categoryName,对应一种tag</p>
<p>params参数点击搜索框内的信息keyName对应一种tag</p>
<p>trademark类的面包屑</p>
<p>搜索框header组件和搜索后含有tag的是兄弟组件</p>
<p>种类: removecategoryName,,,,,removekeyword…..</p>
</blockquote>
<ol>
<li>展示:v-if加插值语法(展示参数中的keyword和paramsName)</li>
<li>发送操作: 点击x,判断是哪一个面包屑tag,发送请求(参数置空)</li>
<li>连锁反应1:此时地址栏也需要变化  :进行路由跳转this.$router,push(‘search’)自己跳自己, 此时需要判断params参数和query参数</li>
<li>连锁反应2: 点击删除的是keyword时需要将header组件search框中的搜索数据给删除了(兄弟组件通信) </li>
<li>进入搜索界面时,这个组件还有一个子组件品牌信息组件,如果点击他上面的信息,也是会展示面包屑,涉及子与父通信</li>
</ol>
<p> 分页器,</p>
<p>vueX存储登陆token无法持久化(第三方库):存储在localstorage,加上自动获取</p>
<p>伪造用户登录进入添加购物车模块,(设置请求头)</p>
<p>注册,登录(token)</p>
<p> 支付  beforeClose:   用定时器反复查询支付状态</p>
<h4 id="配置方面"><a href="#配置方面" class="headerlink" title="配置方面"></a>配置方面</h4><ol>
<li><h6 id="二次封装axios"><a href="#二次封装axios" class="headerlink" title="二次封装axios"></a>二次封装axios</h6></li>
</ol>
<p>配置:</p>
<ul>
<li>设置baseURL: 统一的地址</li>
<li>timeout: 超时时间</li>
<li>请求拦截器可以判断是否携带token操作,有的话则携带在请求头中      游客模式购物车模块:设置uuid带在请求头中(从本地储存中代表临时身份,在store里面,刷新的时候自动调用函数(和后台商量加入请求头))      注册身份token:携带</li>
<li>配置加载进度条特效</li>
</ul>
<ol start="2">
<li><h6 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h6></li>
</ol>
<ul>
<li>代理服务器解决跨域;proxy  用node启动服务器,请求回到这个服务器,服务器没有跨域</li>
</ul>
<ol start="3">
<li><h6 id="第三方库-插件"><a href="#第三方库-插件" class="headerlink" title="第三方库,插件:"></a>第三方库,插件:</h6></li>
</ol>
<ul>
<li>Lodash:防抖,节流(点击搜索按钮)</li>
<li>swiper: 轮播图(主屏幕和商品详情):  加载轮播图的时机: watched(监视轮播图数据)+nextTick(HTML中有for循环遍历图片(数据)需要等待他结束)</li>
<li>lazyload:  图片懒加载</li>
<li>mock模拟一些数据</li>
<li>QRCode  产生二维码</li>
</ul>
<p>业务方面</p>
<ol>
<li>登录注册模块:JS将Token　放入request的Authorization头，发送http请求向后端索要数据</li>
</ol>
<ul>
<li>全局守卫设置不能进入—全局守卫判断是否登录—组件守卫付款界面</li>
</ul>
<ol start="2">
<li>主界面–搜索后的界面——商品详情界面—–购物车界面——–配送界面——付款界面</li>
<li>路由传递参数(第一个主界面到搜索的界面产地搜索内容然后通过路由传递参数—-search界面—-发送请求)</li>
</ol>
<p>路由: </p>
<p>query参数</p>
<ul>
<li>使用query的时候，用name和path引入路由路径都是可以的</li>
<li>这个时候的路由配置index.js中，是不能加参数的，我试了一下加参数的，跳转过去的页面空白</li>
</ul>
<p>params参数	</p>
<ul>
<li><p>注意，一定要用name来引入路由跳转地址，否则跳转不过去</p>
</li>
<li><p>使用params传递参数的时候，router—-index.js中路由的配置一定要在后面加传递过去的参数，有几个加几个</p>
</li>
<li><p>区别 :获取参数的不同this.$route.params.id 和 this.$route.query.id 的区别</p>
<p>在浏览器url地址栏上展示的形式不同，params直接展示参数值 <a href="http://localhost:8081/#/detail/005/19">http://localhost:8081/#/detail/005/19</a><br>query是展示参数名和参数值<a href="http://localhost:8081/#/detail?id=005&amp;age=19">http://localhost:8081/#/detail?id=005&amp;age=19</a></p>
</li>
<li><p>params传参刷新会无效，但是query会保存传递过来的值，刷新不变 ;</p>
</li>
<li><p>动态路由, 优点 ,好看整齐 缺点 必须预先定义, 如果参数多起来多起来不好管控<br>问号的形式 灵活随意想改就改, 想加就加, 缺点就是太丑陋了, 也不直观</p>
</li>
</ul>
<h4 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h4><ol>
<li><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5></li>
<li><h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h5></li>
</ol>
<p>document.innerHeight    (data-src属性,遍历图片和视角比较,如果在视角内的话就可以将src的值替换)    </p>
<p>vue-loazyLoad</p>
<ol start="3">
<li><h5 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h5></li>
<li><h5 id="减少回流重绘-或则经量将操作放在一起-减少操作dom"><a href="#减少回流重绘-或则经量将操作放在一起-减少操作dom" class="headerlink" title="减少回流重绘(或则经量将操作放在一起)减少操作dom"></a>减少回流重绘(或则经量将操作放在一起)减少操作dom</h5></li>
<li><h5 id="图片-雪碧图"><a href="#图片-雪碧图" class="headerlink" title="图片(雪碧图)"></a>图片(雪碧图)</h5></li>
<li><h5 id="按需引入-Lodash"><a href="#按需引入-Lodash" class="headerlink" title="按需引入(Lodash)"></a>按需引入(Lodash)</h5></li>
<li><h5 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h5></li>
</ol>
<p>组件的复用,CSS.html不要层级过审,</p>
<p>vue中的数据层级也不要过深,不用监听的数据Object.freezing() </p>
<p>路由懒加载()&#x3D;&gt;{import(.&#x2F;xxxx)}</p>
<p>keep-alive的使用</p>
<h3 id="项目优化-1"><a href="#项目优化-1" class="headerlink" title="项目优化"></a>项目优化</h3><h6 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h6>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
</search>
